#!/usr/bin/env python


#  This is designed to be used in the jail or on the build machine, not on the server build machine.
#    Only because this step isn't done very often, but it's necessary that it's automated only for
#    reproducability or updates


# dep_def file has name, source, and build can be overridden if something other than:
#  ./configure --prefix=/tmp/install ; make ; make install
#  needs to be done


import sys
import shutil
import os.path
import os
import distutils.dir_util
import re

import utils
import packaging
import config

if len(sys.argv) < 4:
	print "Usage: ./do-dep-build <distro> <def filename> <release>"
	sys.exit(1)

distro = sys.argv[1]
def_filename = sys.argv[2]
release = sys.argv[3]

conf = packaging.buildconf(distro, exclusive=False)

build_location = conf.env_vars['build_location']
build_os = conf.info['os'] + conf.info['version']

temp_dir = build_location + os.sep + 'build'

# Load in package info
execfile(def_filename)

if os.path.exists(temp_dir):
	shutil.rmtree(temp_dir)
os.mkdir(temp_dir)
os.chdir(temp_dir)

if not BUILD_HOSTS.count(distro):
	print "Valid distros: %s" % BUILD_HOSTS

built_packages = []

if os.path.exists('built-packages'): shutil.rmtree('built-packages')
os.mkdir('built-packages')
if not os.path.exists('sources'): os.mkdir('sources')

for pack in packages:

	# Gather build info
	if pack.has_key('version'):
		version = pack['version']
	else:
		version = re.compile('%s-(.*)%s' % (pack['name'], config.sources_ext_re_string)).search(os.path.basename(pack['source'])).group(1)


	if pack.has_key('build'):
		script = pack['build']
	else:
		script = """
			./configure --prefix=/tmp/install || exit 1
			make || exit 1
			make install || exit 1
			"""

	filename = os.path.join(temp_dir + '/built-packages', "-".join([pack['name'], version, release]) + "." + ".".join([build_os, 'novell', conf.info['arch'], 'zip']) )

	# Check for existing build...
	if utils.get_dict_var('skip', pack):
		print pack['name'] + " has been configured to be skipped!..."
		continue
	elif os.path.exists(filename):
		print pack['name'] + " has already been built!, using existing build..."

	# Build if we don't have this filename already
	else:

		print " --- Cleaning/Setting up for: " + pack['name'] + " ---"
		# Clean out areas
		for path in ['/tmp/build_deps', '/tmp/install', 'BUILD']:
			if os.path.exists(path):
				shutil.rmtree(path)

		# Install deps
		env_string = ""
		if built_packages:
			(code, output) = utils.launch_process(build_location + '/do-install-zip-pkgs /tmp/build_deps /tmp/build_deps %s/%s' % (temp_dir, 'built-packages') )
			if code:
				print "Error running do-install-zip-pkgs, code: %d" % code
				sys.exit(1)
			env_string = ". /tmp/build_deps/env.sh; "

		os.mkdir('BUILD')
		os.chdir('BUILD')

		# Get and unpack the source
		print " --- Unpacking : " + pack['name'] + " ---"
		utils.get_url(pack['source'], '../sources')
		source = utils.unpack_source('../sources/' + os.path.basename(pack['source']), tar_path=conf.get_info_var('tar_path'))
		os.chdir(source)

		print " --- Building: " + pack['name'] + " ---"
		code, output = utils.launch_process(env_string + script)

		if code:
			print "Error building " + pack['name']
			sys.exit(1)

		# Run a post command if there is one
		post_command = utils.get_dict_var('post', pack)
		if post_command:
			print " --- Post Build: " + pack['name'] + " ---"
			code, output = utils.launch_process(env_string + post_command)

			if code:
				print "Error running post command for " + pack['name']
				sys.exit(1)


		os.chdir('/tmp/install')
		
		print " --- Archiving: " + pack['name'] + " ---"
		code, output = utils.launch_process('zip -ry %s *' % filename)

		os.chdir(temp_dir)

	built_packages.append(filename)


print " --- Done! ---"

