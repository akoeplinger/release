#!/usr/bin/env python

import sys
import shutil
import os
import glob
import re
import distutils.dir_util

sys.path.append('.')

import utils
import packaging

(rev, package, distro, version) = sys.argv[1:]

os.chdir('build')

temp_build_dir = os.getcwd()

# Load def info
conf = packaging.buildconf(distro, exclusive=False)
pack_def = packaging.package(conf, package, inside_jail=True)


for d in [ 'built-packages', 'BUILD', '/tmp/install' ]:
	if os.path.exists(d):
		shutil.rmtree(d)

os.mkdir('BUILD')
os.chdir('BUILD')

sources = glob.glob('../*.zip')
sources += glob.glob('../*.tar.gz')
sources += glob.glob('../*.tar.bz2')
patches = glob.glob('../*.patch')
patches.sort()


# Find type of source
source_dir = utils.unpack_source(sources[0], tar_path=conf.get_info_var('tar_path') )

arch = pack_def.package_env.info['arch']

os.chdir(source_dir)

# Apply patches if this package defines it
if pack_def.get_info_var('USE_PATCHES'):
	for patch in patches:
		if(os.system("patch -p1 < ../" + patch)):
			print "Failed applying patch: " + os.path.basename(patch)
			sys.exit(1)

# Get code from def file
shell_code = pack_def.get_zip_build_commands()

# load up environment for deps, and execute build command
build_command = shell_code

# Trying to load this missing file fails on solaris 10... ?
# Create an empty file if it's not there
if not os.path.exists('/tmp/build_deps'):
	os.mkdir('/tmp/build_deps')
if not os.path.exists('/tmp/build_deps/env.sh'):
	fd = open('/tmp/build_deps/env.sh', 'w')
	fd.write("")
	fd.close()

build_command = ". /tmp/build_deps/env.sh ; " + build_command
print build_command

# TODO:  For some reason the above exit isn't being called on failures
#  (Still an issue... ?)
if(os.system(build_command)):
	print "Build failed..."
	sys.exit(1)

# Package up the build (must not use temp_build_dir here for relocation correctness)
os.chdir('/tmp/install')
distutils.dir_util.mkpath(temp_build_dir + '/built-packages')
os.system('zip -yr %s/built-packages/%s-%s-%s.%s.zip *' % (temp_build_dir, package, version, rev, arch) )
# Keep a copy of the "spec" file and distro conf file
shutil.copy(temp_build_dir + os.sep + package, temp_build_dir + '/built-packages')
shutil.copy(temp_build_dir + os.sep + distro, temp_build_dir + '/built-packages')

# Keep the patches if they are used
if pack_def.get_info_var('USE_PATCHES'):
	for patch in patches:
		shutil.copy(temp_build_dir + os.sep + os.path.basename(patch), temp_build_dir + '/built-packages')

# Save alias files
for f in pack_def.get_aliases():
	shutil.copy(temp_build_dir + os.sep + f, temp_build_dir + '/built-packages')

