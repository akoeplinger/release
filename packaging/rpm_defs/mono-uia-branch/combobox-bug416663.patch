Index: System.Windows.Forms/ComboBox.cs
===================================================================
--- System.Windows.Forms/ComboBox.cs	(revision 111121)
+++ System.Windows.Forms/ComboBox.cs	(working copy)
@@ -838,6 +838,14 @@
 		}
 		#endregion
 
+		#region UIA Framework Properties
+
+		internal TextBox UIATextBox {
+			get { return textbox_ctrl; }
+		}
+
+		#endregion UIA Framework Properties
+
 		#region Public Methods
 #if NET_2_0
 		[Obsolete ("This method has been deprecated")]
@@ -1913,7 +1921,33 @@
 
 			private ComboBox owner;
 			internal ArrayList object_items = new ArrayList ();
+			
+			#region UIA Framework Events
 
+#if NET_2_0
+			//NOTE:
+			//	We are using Reflection to add/remove internal events.
+			//	Class ListProvider uses the events.
+			//
+			//Event used to generate UIA StructureChangedEvent
+			static object UIACollectionChangedEvent = new object ();
+
+			internal event CollectionChangeEventHandler UIACollectionChanged {
+				add { owner.Events.AddHandler (UIACollectionChangedEvent, value); }
+				remove { owner.Events.RemoveHandler (UIACollectionChangedEvent, value); }
+			}
+			
+			internal void OnUIACollectionChangedEvent (CollectionChangeEventArgs args)
+			{
+				CollectionChangeEventHandler eh
+					= (CollectionChangeEventHandler) owner.Events [UIACollectionChangedEvent];
+				if (eh != null)
+					eh (owner, args);
+			}
+#endif
+
+			#endregion UIA Framework Events
+
 			public ObjectCollection (ComboBox owner)
 			{
 				this.owner = owner;
@@ -1943,7 +1977,18 @@
 					if (value == null)
 						throw new ArgumentNullException ("value");
 
+#if NET_2_0
+					//UIA Framework event: Item Removed
+					OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Remove, index));
+#endif
+
 					object_items[index] = value;
+					
+#if NET_2_0
+					//UIA Framework event: Item Added
+					OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Add, index));
+#endif
+
 					if (owner.listbox_ctrl != null)
 						owner.listbox_ctrl.InvalidateItem (index);
 					if (index == owner.SelectedIndex) {
@@ -1996,6 +2041,11 @@
 				object_items.Clear ();
 				owner.UpdatedItems ();
 				owner.Refresh ();
+				
+#if NET_2_0
+				//UIA Framework event: Items list cleared
+				OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Refresh, -1));
+#endif
 			}
 			
 			public bool Contains (object value)
@@ -2057,8 +2107,13 @@
 				
 				if (owner.Sorted)
 					AddItem (item);
-				else
+				else {
 					object_items.Insert (index, item);
+#if NET_2_0
+					//UIA Framework event: Item added
+					OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Add, index));
+#endif					
+				}
 				
 				owner.EndUpdate ();	// Calls UpdatedItems
 			}
@@ -2084,6 +2139,11 @@
 
 				object_items.RemoveAt (index);
 				owner.UpdatedItems ();
+				
+#if NET_2_0
+				//UIA Framework event: Item removed
+				OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Remove, index));
+#endif
 			}
 			#endregion Public Methods
 
@@ -2105,12 +2165,23 @@
 							if (index <= owner.selected_index && owner.IsHandleCreated)
 								owner.selected_index++;
 								
+#if NET_2_0
+							//UIA Framework event: Item added
+							OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Add, index));
+#endif
+
 							return index;
 						}
 						index++;
 					}
 				}
 				object_items.Add (item);
+				
+#if NET_2_0
+				//UIA Framework event: Item added
+				OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Add, object_items.Count - 1));
+#endif
+				
 				return object_items.Count - 1;
 			}
 			
