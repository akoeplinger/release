Index: System.Windows.Forms/ListBox.cs
===================================================================
--- System.Windows.Forms/ListBox.cs	(revision 111121)
+++ System.Windows.Forms/ListBox.cs	(working copy)
@@ -695,6 +695,18 @@
 
 		#endregion Private Properties
 
+		#region UIA Framework Properties
+
+		internal ScrollBar UIAHScrollBar {
+			get { return hscrollbar; }
+		}
+
+		internal ScrollBar UIAVScrollBar {
+			get { return vscrollbar; }
+		}
+
+		#endregion UIA Framework Properties
+
 		#region Public Methods
 #if NET_2_0
 		[Obsolete ("this method has been deprecated")]
@@ -2383,7 +2395,32 @@
 
 			private ListBox owner;
 			internal ArrayList object_items = new ArrayList ();
+			
+			#region UIA Framework Events 
+#if NET_2_0
+			//NOTE:
+			//	We are using Reflection to add/remove internal events.
+			//	Class ListProvider uses the events.
+			//
+			//Event used to generate UIA StructureChangedEvent
+			static object UIACollectionChangedEvent = new object ();
 
+			internal event CollectionChangeEventHandler UIACollectionChanged {
+				add { owner.Events.AddHandler (UIACollectionChangedEvent, value); }
+				remove { owner.Events.RemoveHandler (UIACollectionChangedEvent, value); }
+			}
+
+			internal void OnUIACollectionChangedEvent (CollectionChangeEventArgs args)
+			{
+				CollectionChangeEventHandler eh
+					= (CollectionChangeEventHandler) owner.Events [UIACollectionChangedEvent];
+				if (eh != null)
+					eh (owner, args);
+			}
+
+#endif
+			#endregion UIA Framework Events 
+
 			public ObjectCollection (ListBox owner)
 			{
 				this.owner = owner;
@@ -2424,8 +2461,19 @@
 						throw new ArgumentOutOfRangeException ("Index of out range");
 					if (value == null)
 						throw new ArgumentNullException ("value");
+						
+#if NET_2_0
+					//UIA Framework event: Item Removed
+					OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Remove, index));
+#endif
 
 					object_items[index] = value;
+					
+#if NET_2_0
+					//UIA Framework event: Item Added
+					OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Add, index));
+#endif					
+
 					owner.CollectionChanged ();
 				}
 			}
@@ -2489,6 +2537,11 @@
 				owner.selected_indices.Clear ();
 				object_items.Clear ();
 				owner.CollectionChanged ();
+
+#if NET_2_0
+				//UIA Framework event: Items list cleared
+				OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Refresh, -1));
+#endif
 			}
 			public bool Contains (object value)
 			{
@@ -2549,6 +2602,11 @@
 				object_items.Insert (index, item);
 				owner.CollectionChanged ();
 				owner.EndUpdate ();
+				
+#if NET_2_0
+				//UIA Framework event: Item Added
+				OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Add, index));
+#endif
 			}
 
 			public void Remove (object value)
@@ -2567,6 +2625,11 @@
 				owner.selected_indices.Remove (index);
 				object_items.RemoveAt (index);
 				owner.CollectionChanged ();
+				
+#if NET_2_0
+				//UIA Framework event: Item Removed
+				OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Remove, index));
+#endif
 			}
 			#endregion Public Methods
 
@@ -2578,6 +2641,12 @@
 
 				int cnt = object_items.Count;
 				object_items.Add (item);
+
+#if NET_2_0
+				//UIA Framework event: Item Added
+				OnUIACollectionChangedEvent (new CollectionChangeEventArgs (CollectionChangeAction.Add, cnt));
+#endif
+
 				return cnt;
 			}
 
