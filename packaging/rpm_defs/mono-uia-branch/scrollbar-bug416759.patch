Index: class/Managed.Windows.Forms/System.Windows.Forms/ScrollBar.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms/ScrollBar.cs	(revision 110245)
+++ class/Managed.Windows.Forms/System.Windows.Forms/ScrollBar.cs	(working copy)
@@ -80,6 +80,7 @@
 		bool thumb_entered;
 		#endregion	// Local Variables
 
+
 		private enum TimerType
 		{
 			HoldButton,
@@ -783,6 +784,14 @@
 			event_args = new ScrollEventArgs (ScrollEventType.EndScroll, Value);
 			OnScroll (event_args);
     			Value = event_args.NewValue;
+		
+#if NET_2_0
+			//UIA Framework event invoked when the "LargeIncrement 
+			//Button" is "clicked" either by using the Invoke Pattern
+			//or the space between the thumb and the bottom/right button
+    			if (LargeIncrementCalled != null)
+	    			LargeIncrementCalled (this, EventArgs.Empty);
+#endif
     		}
 
     		private void LargeDecrement ()
@@ -797,6 +806,14 @@
 			event_args = new ScrollEventArgs (ScrollEventType.EndScroll, Value);
 			OnScroll (event_args);
     			Value = event_args.NewValue;
+    			
+#if NET_2_0
+			//UIA Framework event invoked when the "LargeDecrement 
+			//Button" is "clicked" either by using the Invoke Pattern
+			//or the space between the thumb and the top/left button
+    			if (LargeDecrementCalled != null)
+	    			LargeDecrementCalled (this, EventArgs.Empty);
+#endif
     		}
 
     		private void OnResizeSB (Object o, EventArgs e)
@@ -1291,6 +1308,14 @@
 			event_args = new ScrollEventArgs (ScrollEventType.EndScroll, Value);
 			OnScroll (event_args);
 			Value = event_args.NewValue;
+			
+#if NET_2_0
+			//UIA Framework event invoked when the "SmallIncrement 
+			//Button" (a.k.a bottom/right button) is "clicked" either
+			// by using the Invoke Pattern or the button itself
+    			if (SmallIncrementCalled != null)
+	    			SmallIncrementCalled (this, EventArgs.Empty);
+#endif
     		}
 
     		private void SmallDecrement ()
@@ -1305,6 +1330,14 @@
 			event_args = new ScrollEventArgs (ScrollEventType.EndScroll, Value);
 			OnScroll (event_args);
 			Value = event_args.NewValue;
+			
+#if NET_2_0
+			//UIA Framework event invoked when the "SmallDecrement 
+			//Button" (a.k.a top/left button) is "clicked" either
+			// by using the Invoke Pattern or the button itself
+    			if (SmallDecrementCalled != null)
+	    			SmallDecrementCalled (this, EventArgs.Empty);
+#endif			
     		}
 
     		private void SetHoldButtonClickTimer ()
@@ -1528,6 +1561,52 @@
 			base.OnMouseWheel (e);
 		}
 #endif
+
+		#region UIA Framework Section
+
+#if NET_2_0
+		//NOTE:
+		//	We are using Reflection to add/remove internal events.
+		//	Class ScrollBarButtonInvokePatternInvokeEvent uses the events.
+		//
+    		//Events used to generate UIA InvokedEvent
+    		// * LargeIncrementCalled. Large increment UIA Button (Space between Thumb and bottom/right Button)
+    		// * LargeIncrementCalled. Large decrement UIA Button (Space between Thumb and top/left bBtton)
+    		// * SmallIncrementCalled. Small increment UIA Button (bottom/right bBtton)
+    		// * SmallDecrementCalled. Small decrement UIA Button (top/left bBtton)
+    		internal event EventHandler LargeIncrementCalled;
+    		internal event EventHandler LargeDecrementCalled;
+    		internal event EventHandler SmallIncrementCalled;
+    		internal event EventHandler SmallDecrementCalled;
+	
+		//NOTE:
+		//	Wrapper methods used by the Reflection.
+		//	Class ScrollBarButtonInvokeProviderBehavior uses the events.
+		//
+
+		private void UIALargeIncrement ()
+		{
+			LargeIncrement ();
+		}
+
+		private void UIALargeDecrement ()
+		{
+			LargeDecrement ();
+		}
+
+		private void UIASmallIncrement ()
+		{
+			SmallIncrement ();
+		}
+
+		private void UIASmallDecrement ()
+		{
+			SmallDecrement ();
+		}
+#endif
+
+		#endregion
+
 	 }
 }
 
