Index: class/Managed.Windows.Forms/System.Windows.Forms/ScrollBar.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms/ScrollBar.cs	(revision 111121)
+++ class/Managed.Windows.Forms/System.Windows.Forms/ScrollBar.cs	(working copy)
@@ -783,6 +783,13 @@
 			event_args = new ScrollEventArgs (ScrollEventType.EndScroll, Value);
 			OnScroll (event_args);
     			Value = event_args.NewValue;
+		
+#if NET_2_0
+			// UIA Framework event invoked when the "LargeIncrement 
+			// Button" is "clicked" either by using the Invoke Pattern
+			// or the space between the thumb and the bottom/right button
+			OnUIAScroll (new ScrollEventArgs (ScrollEventType.LargeIncrement, Value));
+#endif
     		}
 
     		private void LargeDecrement ()
@@ -797,6 +804,13 @@
 			event_args = new ScrollEventArgs (ScrollEventType.EndScroll, Value);
 			OnScroll (event_args);
     			Value = event_args.NewValue;
+    			
+#if NET_2_0
+			// UIA Framework event invoked when the "LargeDecrement 
+			// Button" is "clicked" either by using the Invoke Pattern
+			// or the space between the thumb and the top/left button
+			OnUIAScroll (new ScrollEventArgs (ScrollEventType.LargeDecrement, Value));
+#endif
     		}
 
     		private void OnResizeSB (Object o, EventArgs e)
@@ -1291,6 +1305,13 @@
 			event_args = new ScrollEventArgs (ScrollEventType.EndScroll, Value);
 			OnScroll (event_args);
 			Value = event_args.NewValue;
+			
+#if NET_2_0
+			// UIA Framework event invoked when the "SmallIncrement 
+			// Button" (a.k.a bottom/right button) is "clicked" either
+			// by using the Invoke Pattern or the button itself
+			OnUIAScroll (new ScrollEventArgs (ScrollEventType.SmallIncrement, Value));
+#endif
     		}
 
     		private void SmallDecrement ()
@@ -1305,6 +1326,13 @@
 			event_args = new ScrollEventArgs (ScrollEventType.EndScroll, Value);
 			OnScroll (event_args);
 			Value = event_args.NewValue;
+			
+#if NET_2_0
+			// UIA Framework event invoked when the "SmallDecrement 
+			// Button" (a.k.a top/left button) is "clicked" either
+			// by using the Invoke Pattern or the button itself
+			OnUIAScroll (new ScrollEventArgs (ScrollEventType.SmallDecrement, Value));
+#endif			
     		}
 
     		private void SetHoldButtonClickTimer ()
@@ -1528,6 +1556,64 @@
 			base.OnMouseWheel (e);
 		}
 #endif
+
+		#region UIA Framework Section: Events, Methods and Properties.
+
+#if NET_2_0
+		//NOTE:
+		//	We are using Reflection to add/remove internal events.
+		//	Class ScrollBarButtonInvokePatternInvokeEvent uses the events.
+		//
+    		// Events used to generate UIA InvokedEvent
+		// * args.Type = ScrollEventType.LargeIncrement. Space between Thumb and bottom/right Button
+		// * args.Type = ScrollEventType.LargeDecrement. Space between Thumb and top/left Button
+		// * args.Type = ScrollEventType.SmallIncrement. Small increment UIA Button (bottom/right Button)
+    		// * SmallDecrementCalled. Small decrement UIA Button (top/left Button)
+		static object UIAScrollEvent = new object ();
+
+		internal event ScrollEventHandler UIAScroll {
+			add { Events.AddHandler (UIAScrollEvent, value); }
+			remove { Events.RemoveHandler (UIAScrollEvent, value); }
+		}
+
+		internal void OnUIAScroll (ScrollEventArgs args)
+		{
+			ScrollEventHandler eh = (ScrollEventHandler) Events [UIAScrollEvent];
+			if (eh != null)
+				eh (this, args);
+		}
+
+		//NOTE:
+		//	Wrapper methods used by the Reflection.
+		//	Class ScrollBarButtonInvokeProviderBehavior uses the events.
+		//
+		internal void UIALargeIncrement ()
+		{
+			LargeIncrement ();
+		}
+
+		internal void UIALargeDecrement ()
+		{
+			LargeDecrement ();
+		}
+
+		internal void UIASmallIncrement ()
+		{
+			SmallIncrement ();
+		}
+
+		internal void UIASmallDecrement ()
+		{
+			SmallDecrement ();
+		}
+
+		internal Rectangle UIAThumbArea {
+			get { return thumb_area; }
+		}
+#endif
+
+		#endregion UIA Framework Section: Events, Methods and Properties.
+
 	 }
 }
 
