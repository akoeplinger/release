#!/usr/bin/env python

import os
import sys
import getopt
import time

sys.path.append('../pyutils')

import packaging
import logger

noclean = False
opts, remaining_args = getopt.getopt(sys.argv[1:], "", [ "noclean" ])
for option, value in opts:
        if option == "--noclean":
                noclean = True

try:
	(jail, def_filename, release) = remaining_args
except:
        print "Usage: dep_builder [ --noclean ] <jail> <dep_def filename> <release>"
        print "  where --noclean will skip successful builds"
        sys.exit(1)

conf = packaging.buildconf(jail)

build_location = conf.env_vars['build_location']

# Clean up
if not noclean:
	conf.buildenv.remove_path(build_location + "/build")

conf.buildenv.copy_to(['do-dep-build', 'dep_defs/' + def_filename, '../pyutils/*.py', 'do-install-zip-pkgs', '../pyutils/rpm2cpio.py', 'conf/' + jail], build_location)

log_obj = logger.Logger(filename="logs/%s.%s.%s.log" % (def_filename, jail, time.strftime("%Y%m%d_%H%M%S")), compressed=0)
code, output = conf.buildenv.execute_command('%s/do-dep-build %s %s %s' % (build_location, jail, def_filename, release), my_logger=log_obj )

if code:
	print "Error building deps..."
	conf.buildenv.unlock_env()
	sys.exit(1)

# Copy files back
dep_location = "external_zip_pkg/%s" % jail
if not os.path.exists(dep_location):
	os.mkdir(dep_location)

log_obj.log("Copying files back to %s...\n" % dep_location)
conf.buildenv.copy_from(build_location + '/build/built-packages/*', dep_location)

conf.buildenv.unlock_env()
