web_index=8
web_ignore_noarch=1
 
# Note: this noarch package builds on two platforms
#  BE SURE to build on windows first before building the rpm, otherwise the
#  1.0 vb runtime won't be included

BUILD_HOSTS=(
	win-4-i386
        sles-10-i586

	sles-10-x86_64
	sles-10-ia64
	sles-10-ppc
	macos-10-ppc
	macos-10-x86
	sunos-8-sparc
	sunos-10-sparc
	sunos-10-x86
	win-4-i386
	debian-4-arm
	debian-4-sparc
)

USE_HOSTS=(
	ALL
)

MONO_DEPS=(
	mono
)

# Put this here since we build on windows
MONO_RECOMMEND_DEPS=(
	libgdiplus
)

get_destroot () {
        if test "x$DISTRO" = "xwin-4-i386" ; then
                DEST_ROOT=$DISTRO
	# For mktarball
        elif test "x$DISTRO" = "xsuse-110-x86_64" ; then
                DEST_ROOT=noarch
	# For building...
        elif test "x$DISTRO" = "xsles-10-i586" ; then
                DEST_ROOT=noarch
	elif test "x$UPLOAD_SNAPSHOT" = "x1" ; then
		DEST_ROOT=noarch
	else
		if test "x$HEAD_or_RELEASE" = "xHEAD" ; then
			# for monobuild (building on all archs)
			DEST_ROOT=$DISTRO
		else
			# For release time
			DEST_ROOT=noarch
		fi
	fi
}

HEAD_PATH=(
	trunk/mono-basic
)
RELEASE_PATH=(
	tags/mono-[[version]]/mono-basic
)

update_version_file () {
	sed -i "s/VERSION=\([\.0-9]*\)/VERSION=$VERSION/" configure
}

make_dist () {
	./configure --prefix=/usr

	# should this be needed?
	make

	make dist
}

ZIP_BUILD () {

        # This is so we can use the relocated mono (Will probably have to do this for all builds on mac)
        MONO_GAC_PREFIX=/tmp/build_deps
        MONO_PREFIX=/tmp/build_deps
        MONO_CFG_DIR=/tmp/build_deps/etc
        MONO_PATH=/tmp/build_deps/lib

	# For solaris10 (install)
	PATH=$PATH:/usr/sbin
	export MONO_GAC_PREFIX MONO_PREFIX MONO_CFG_DIR MONO_PATH PATH

	./configure --prefix=/usr
	$make_path

	$make_path install DESTDIR=/tmp/install
}

win_4_i386_ZIP_BUILD () {

	cd vbruntime

	# This doesn't get included with the tarball... create here
	mkdir bin

	OLDPATH=$PATH

	# compiler croaks if this isn't here...
	# Not needed anymore
	#mkdir bin

	########################## 1.0 build #################################
        CSC=`cygpath -d /cygdrive/c/WINDOWS/Microsoft.NET/Framework/v1.1.4322`
        CSC=`cygpath -a $CSC`

        # Add MS SDK to path for ilasm and ildasm
        SDK=`cygpath -d "/cygdrive/c/Program Files/Microsoft.NET/SDK/v1.1/Bin"`
        SDK=`cygpath -a $SDK`
        export PATH=$SDK:$CSC:$OLDPATH

	rm -f Microsoft.VisualBasic.dll Microsoft.VisualBasic/*.log
	cmd /c VB.build.bat 1 release || (cat Microsoft.VisualBasic/*.log && exit 1)

	# Install
	export PATH=$OLDPATH
	cd bin
	/tmp/build_deps/bin/gacutil -package 1.0 -i Microsoft.VisualBasic.dll -root `cygpath -m /tmp/install/lib` || exit 1
	cd ..

	# Disable 2.0 Build as it's broken but we replace the 2.0 binaries anyway
	exit 0
	########################## 2.0 build #################################
        CSC=`cygpath -d /cygdrive/c/WINDOWS/Microsoft.NET/Framework/v2.0.50727`
        CSC=`cygpath -a $CSC`

        # Add MS SDK to path for ilasm and ildasm
        SDK=`cygpath -d "/cygdrive/c/Program Files/Microsoft Visual Studio 8/SDK/v2.0/Bin"`
        SDK=`cygpath -a $SDK`
        export PATH=$SDK:$CSC:$OLDPATH

	rm -f Microsoft.VisualBasic.dll Microsoft.VisualBasic/*.log
	cmd /c VB.build.bat 2 release || (cat Microsoft.VisualBasic/*.log && exit 1)

	# Install
	export PATH=$OLDPATH
	cd bin
	/tmp/build_deps/bin/gacutil -package 2.0 -i Microsoft.VisualBasic.dll -root `cygpath -m /tmp/install/lib` || exit 1
	cd ..

}

POSTBUILD_TEST_NAME1="test"
POSTBUILD_TEST1 () {
        if test "x$DISTRO" = "xwin-4-i386" ; then
		$make_path test
        elif test "x$DISTRO" = "xsles-10-i586" ; then
		$make_path test
        else
                true
	fi
}

POSTBUILD_STEP_NAME1="api-diff"
POSTBUILD_STEP1 () {

	if test x$DISTRO != xsles-10-i586 ; then
                echo "Class status pages not generated on this platform"
                exit 0
	fi

        mkdir status
        cd status

        wget --tries=1 --timeout=10 http://mono.ximian.com/masterinfos/masterinfos-2.0.tar.gz

        # todo: wget these out of subversion
        wget --tries=1 --timeout=10 http://primates.ximian.com/~wberrier/class_status/deploy.tar.bz2
        wget --tries=1 --timeout=10 http://anonsvn.mono-project.com/source/trunk/olive/status/mono-api.xsl
        wget --tries=1 --timeout=10 http://primates.ximian.com/~wberrier/class_status/transform.exe

        tar -zxf masterinfos-2.0.tar.gz
        tar -jxf deploy.tar.bz2

        mkdir infos
        mkdir src

        echo "<p>Date: `date`</p>" >> deploy/index.html
        echo "<p>Revision: $version</p>" >> deploy/index.html
        echo "<ul>" >> deploy/index.html

        # Output to step-output dir, which will get recursively copied back to the build info
        # Are these per file, or can multiple namespaces be in a file... ??
        # (ie: is it ok for this list to be generated dynamically?)
        for i in /tmp/monobuild/build/BUILD/mono-basic-*/class/lib/vbnc/*.dll ; do
                f=`basename $i .dll`

                # Only generate for the files we have master infos for
                if [ -e masterinfos/$f.xml ] ; then
                        echo "building class status page for: $i"
                        mono-api-info2 $i > infos/$f.xml
                        mono-api-diff masterinfos/$f.xml infos/$f.xml > src/$f.src
                        mono transform.exe src/$f.src mono-api.xsl source-name=$f.src > deploy/$f.html
                        echo "<li><a href=\"$f.html\">$f</a></li>" >> deploy/index.html
                fi
        done
        echo "</ul>" >> deploy/index.html

        target=$build_location/steps/api-diff
        mkdir -p $target
        cp -Rf deploy/*  $target
}

