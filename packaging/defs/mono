web_index=0

# Possibly use sles-8 as the new base distro?
BUILD_HOSTS=(
	macos-10-ppc
	macos-10-x86
	redhat-9-i386
	sles-9-x86_64
	sles-9-ia64
	sles-9-s390
	sles-9-s390x
	sunos-8-sparc
	sunos-10-x86
	win-4-i386
)

USE_HOSTS=(
	fedora-3-i386
	fedora-4-i386
	fedora-4-x86_64
	fedora-5-i386
	fedora-5-x86_64
	macos-10-ppc
	macos-10-x86
	nld-9-i586
	nld-9-x86_64
	redhat-9-i386
	rhel-3-i386
	rhel-4-i386
	sles-9-i586
	sles-9-ia64
	sles-9-s390
	sles-9-s390x
	sles-9-x86_64
	sunos-8-sparc
	suse-92-i586
	suse-93-i586
	suse-93-x86_64
	suse-100-i586
	suse-100-x86_64
	suse-101-i586
	suse-101-x86_64
	win-4-i386
)

# Having this ensures that the wrong mono isn't in the jail
#  (Or that mono is present for the snapshot builds)
# libgdiplus is here only for System.Drawing tests (Hmm... this will fail the build on windows, solution?)
MONO_DEPS=(
	mono
)

# This way? and then install runtime deps before running the additional steps... ?  runtime and build?  Reinstall them all over again?
MONO_RECOMMEND_DEPS=(
	libgdiplus
)

win_4_i386_ZIP_RUNTIME_DEPS=(
	http://primates.ximian.com/~wberrier/windows-installer/ms_gdiplus/3102.1360/gdiplus.exe
)

## format: <$DISTRO>_ZIP_DEPS
# Note: $DISTRO must have the hyphens converted to underscores
win_4_i386_ZIP_DEPS=(

	http://ftp.gnome.org/pub/GNOME/platform/2.12/2.12.2/win32/glib-2.8.6.zip
	http://ftp.gnome.org/pub/GNOME/platform/2.12/2.12.2/win32/glib-dev-2.8.6.zip
	http://ftp.gnome.org/pub/GNOME/platform/2.12/2.12.2/win32/dependencies/gettext-0.14.5.zip
	http://ftp.gnome.org/pub/GNOME/platform/2.12/2.12.2/win32/dependencies/gettext-dev-0.14.5.zip
	http://ftp.gnome.org/pub/GNOME/platform/2.12/2.12.2/win32/dependencies/libiconv-1.9.1.bin.woe32.zip

	# This pkg-config expects win32 names... not cygwin names...
	#ftp://ftp.gtk.org/pub/gtk/v2.8/win32/dependencies/pkg-config-0.20.zip
	http://www.gimp.org/~tml/gimp/win32/pkgconfig-0.15.zip

)

sunos_8_sparc_ZIP_DEPS=(

	# Should we use blastwave instead?  they follow more package standards than smc does... (gmake, gtar, gm4, etc...)

	# Sunfreeware packages
	#ftp://sunfreeware.mirrors.tds.net/pub/sunfreeware/sparc/5.8/libgcc-3.3-sol8-sparc-local.gz
	# Have to use this one because above is not under $prefix/lib
	# TODO: This packages doesn't have symbolic links, is this ok?
	http://primates.ximian.com/~wberrier/sunos/deps/sunfreeware/sunos-8-sparc/libgcc-3.3-0-sunos8.sparc.zip

	# 2.6.2 glib is missing a header file (glibconfig.h)
	#ftp://sunfreeware.mirrors.tds.net/pub/sunfreeware/sparc/5.8/glib-2.6.2-sol8-sparc-local.gz
	#ftp://sunfreeware.mirrors.tds.net/pub/sunfreeware/sparc/5.8/glib-2.2.3-sol8-sparc-local.gz 
	# We need glib 2.4 or higher for the icall [un]setenv
	http://primates.ximian.com/~wberrier/sunos/deps/novell/glib-2.8.3-0.sunos8.novell.sparc.zip

	# Gettext needs expat
	ftp://sunfreeware.mirrors.tds.net/pub/sunfreeware/sparc/5.8/gettext-0.14.1-sol8-sparc-local.gz
	ftp://sunfreeware.mirrors.tds.net/pub/sunfreeware/sparc/5.8/expat-1.95.5-sol8-sparc-local.gz
	ftp://sunfreeware.mirrors.tds.net/pub/sunfreeware/sparc/5.8/libiconv-1.8-sol8-sparc-local.gz

	# Most packages need this
	ftp://sunfreeware.mirrors.tds.net/pub/sunfreeware/sparc/5.8/libintl-3.4.0-sol8-sparc-local.gz 

	ftp://sunfreeware.mirrors.tds.net/pub/sunfreeware/sparc/5.8/pkgconfig-0.15.0-sol8-sparc-local.gz

	# Random generator for crypto
	# The other option is to require: a sun patch (http://www.cosy.sbg.ac.at/~andi/SUNrand/)
	# For sunos8sparc, it's patch 112438
	#ftp://sunfreeware.mirrors.tds.net/pub/sunfreeware/sparc/5.8/egd-0.8-sol8-sparc-local.gz
	# Egd won't work here... users must use the patch

	# For testing...
	#ftp://sunfreeware.mirrors.tds.net/pub/sunfreeware/sparc/5.8/gdb-6.0-sol8-sparc-local.gz
)

macos_10_ppc_ZIP_DEPS=(
	# See http://primates.ximian.com/~wberrier/macos/deps/README
	http://primates.ximian.com/~wberrier/macos/deps/ppc/glib-2.6.3-0.macos10.novell.ppc.zip
	http://primates.ximian.com/~wberrier/macos/deps/ppc/pkgconfig-0.15.0-0.macos10.novell.ppc.zip
	http://primates.ximian.com/~wberrier/macos/deps/ppc/gettext-0.14.1-0.macos10.novell.ppc.zip
)

macos_10_x86_ZIP_DEPS=(
	# See http://primates.ximian.com/~wberrier/macos/deps/README
	http://primates.ximian.com/~wberrier/macos/deps/x86/glib-2.6.3-0.macos10.novell.x86.zip
	http://primates.ximian.com/~wberrier/macos/deps/x86/pkgconfig-0.15.0-0.macos10.novell.x86.zip
	http://primates.ximian.com/~wberrier/macos/deps/x86/gettext-0.14.1-0.macos10.novell.x86.zip
)

sunos_8_sparc_ZIP_BUILD () {
	# Bison fails without the M4 var (tries to use /usr/ccs/bin/m4 instead otherwise)

	# Only if a non-gnu m4 is in the path
	M4=/usr/local/bin/m4
	export M4

	# Do this to make sure libgcc is found.  Won't be needed when we install libgcc into build_deps
	#export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

	# Use /opt/mono for prefix.  Even though env vars can be used for relocation, this will help
	./configure --prefix=/opt/mono || exit 1
	make || exit 1

	rm -Rf /tmp/temp_install
	make install DESTDIR=/tmp/temp_install || exit 1

	# Do this so all the zip files have the same base, and we can lay them back here later
	mkdir -p /tmp/install
	cd /tmp/temp_install/opt/mono
	mv * /tmp/install

}

sunos_10_x86_ZIP_BUILD () {
	# Installed the following packages from solaris cds: python, wget, gmake, gm4, bison, gccruntime, gcc
	#  From this webpage: http://www.sunfreeware.com/faq.html#q5: SUNWbtool, SUNWsprot, SUNWhea, SUNWarc, SUNWlibm, SUNWlibms, SUNWdfbh, SUNWcg6h, SUNWxwinc, SUNWolinc, SUNWxglh
	# also from the cds: gnome-common-devel, gnome-common-devel-share, SUNWperl-xml-parser, SUNWopenjade, opensp, SUNWgnome-base-libs-devel
	# Bison fails without the M4 var (tries to use /usr/ccs/bin/m4 instead otherwise)
	# Only if a non-gnu m4 is in the path
	M4=/usr/sfw/bin/gm4
	MAKE=/usr/sfw/bin/gmake
	export M4 MAKE

	# Change offsize from 64 to 32 in configure
	# Removed -mt option from gthread .pc file
	
	./configure --prefix=/opt/mono
	gmake || exit 1

	rm -Rf $build_location/temp_install
	gmake install DESTDIR=$build_location/temp_install || exit 1

	# Do this so all the zip files have the same base, and we can lay them back here later
	mkdir /tmp/install
	cd $build_location/temp_install/opt/mono
	mv * /tmp/install

}

win_4_i386_ZIP_BUILD () {

	./configure --prefix=/tmp/install

	make || exit 1
	make install || exit 1
}

macos_10_ZIP_BUILD () {

	# This helps with relocating binaries to a destination of a very large pathname
	#  (See http://lists.apple.com/archives/darwin-development/2003/Sep/msg00274.html)
	#export CFLAGS=" -Wl,-header-pad_max_install_names "

	# This doesn't fix the relocation error with libmono-profiler-cov ... ?
	export LDFLAGS=" -header-pad_max_install_names "

	MONO_PREFIX=/Library/Frameworks/Mono.framework/Versions/$version

	# This really should go in the autotooled build... ?
	#Create gacutil config files specific to OS X
cat <<EOF > mcs/class/lib/default/System.Drawing.dll.config
<configuration>
        <dllmap dll="gdiplus.dll" target="$MONO_PREFIX/lib/libgdiplus.dylib" />
</configuration>
EOF


cat <<EOF > mcs/class/lib/default/System.Windows.Forms.dll.config
<configuration>
        <dllmap dll="gdiplus" target="$MONO_PREFIX/lib/libgdiplus.dylib" />
        <dllmap dll="libX11" target="/usr/X11R6/lib/libX11.dylib" />
</configuration>
EOF
cat<<EOF > mcs/class/lib/default/Mono.Posix.dll.config
<configuration>
        <dllmap dll="MonoPosixHelper" target="$MONO_PREFIX/lib/libMonoPosixHelper.dylib"/>
</configuration>
EOF

	# Need a version here...
	./configure --prefix=$MONO_PREFIX --with-preview=yes

	make || exit 1

	rm -Rf /tmp/temp_install
	make install DESTDIR=/tmp/temp_install || exit 1

	# Do this so all the zip files have the same base, and we can lay them back here later
	mkdir -p /tmp/install
	cd /tmp/temp_install/Library/Frameworks/Mono.framework/Versions/$version
	mv * /tmp/install

}

get_destroot () {
	# rh9 rpms can't be used on sles-8-i386
	if [ $DISTRO == "sles-8-i386" ] ; then
		DEST_ROOT=$DISTRO
	elif [ x$USE_ZIP_PKG != x ] ; then
		DEST_ROOT=$DISTRO
	else
		DEST_ROOT=$ARCH
	fi
}

HEAD_PATH=(
	trunk/mono
	trunk/mcs
)

RELEASE_PATH=(
	tags/mono-[[version]]/mono
	tags/mono-[[version]]/mcs
)

make_dist () {
	. /etc/profile
	./autogen.sh
	if [ $HEAD_or_RELEASE == "HEAD" ] ; then
                make dist-zip MCS=mcs RESGEN=resgen
        else
                make dist MCS=mcs RESGEN=resgen
        fi

}

POSTBUILD_STEP_NAME1="test-runtime"
POSTBUILD_STEP1 () {
	#echo "Skipping..."
	cd mono
	$make_path -k check
}

POSTBUILD_STEP_NAME2="test-aot"
POSTBUILD_STEP2 () {
	echo "Skipping..."
}

POSTBUILD_STEP_NAME3="test-profiles"
POSTBUILD_STEP3 () {
	#echo "Skipping..."
	cd runtime
	$make_path -k check
}

POSTBUILD_STEP_NAME4="test-cas"
POSTBUILD_STEP4 () {
	# These hang the tests on sles-9-ia64, so skip for now...
	if [ $DISTRO != "sles-9-ia64" ] ; then
		cd mono/tests/cas
		$make_path -k test
	else
		echo "Skipping..."
	fi
}

POSTBUILD_STEP_NAME5="test-swf"
POSTBUILD_STEP5 () {
	#echo "Skipping..."
	DISPLAY=monobuild1.boston.ximian.com:1
	export DISPLAY
	cd mcs/class/Managed.Windows.Forms
	$make_path run-test
	#./tests.sh all
}

POSTBUILD_STEP_NAME6="cleanup"
POSTBUILD_STEP6 () {
        #echo "Skipping..."
        ./runtime/mono-wrapper --wapi=semdel
}


