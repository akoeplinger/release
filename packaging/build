#!/bin/sh
#
# Usage: build os-target package version [serial]
#
# Where:
#    os-target is the OS target that we are building for
#    package is the name of the BB XML configuration file on the repository
#    version is the version you want to build
#    serial is optionally the build number. If it is not present, it is assumed
#      to be zero.
#
# Example:
#    build suse-92-i386 mono-1.1 1.1.6
#

distro=$1
package=$2
version=$3
serial=${4-0}

. shared-code.sh


usage()
{
	echo "Usage is: build configuration package version <release>"
	echo "	<release> is optional"
}

if test x$version = x; then
    usage
    exit 1;
fi

if test -f status/$distro; then
   echo $1 jail is busy
   exit 1
fi

. conf/$distro
. defs/$package

# See: http://linuxreviews.org/beginner/abs-guide/en/x15283.html
# Example 34-16. Passing and returning arrays
contains $distro "`echo ${BUILD_HOSTS[@]}`"
if [ $? -eq 0 ]; then
	echo $distro is not in BUILD_HOSTS
	exit 1
fi

distro_info $distro
get_destroot $distro
get_revision

if [ $serial -eq 0 ]; then
	VER_PATH="$version"
else
	VER_PATH="$version-$serial"
fi

# Set some defaults of where to find packages/sources
source_path=sources
if [ ! -z $USE_ZIP_PKG ]; then
	package_path=zip_packages
else
	package_path=packages
fi

# Figure out if this is a snapshot build or not...
if [ -e sources/$package/*-$version.tar.gz ] || [ -e sources/$package/*-$version.zip ] ; then
	echo "Using release sources and packages"
elif [ -e snapshot_sources/$package/*-$version.tar.gz ] || [ -e snapshot_sources/$package/*-$version.zip ] ; then
	echo "Using snapshot sources and packages"
	source_path="snapshot_${source_path}"
	package_path="snapshot_${package_path}"
else
	echo Cannot find source file for $package
	exit 1
fi


if [ -d $package_path/$DEST_ROOT/$package/$VER_PATH ]; then
	echo "The path for this package ($package_path/$DEST_ROOT/$package/$VER_PATH) already exists. You probably need to bump the revision number"
	exit 1;
fi

LOGFILE=logs/$package-$version-$serial-$distro
rm -rf $LOGFILE

mkdir -p `dirname $LOGFILE`

echo > status/$distro;

echo "Install dependencies..."
if ! ./install-deps $distro $package >> $LOGFILE 2>&1; then
	rm status/$distro
	echo Dependency installation failed, see log in $LOGFILE for details
	exit 1
fi

if [ -z $USE_ZIP_PKG ]; then

	scp do-build ../conf/$package/* $source_path/$package/*-$version.tar.gz $source_path/$package/*-$version.zip $target_host:$jaildir/tmp 

	if ! ./jail-do $distro "/tmp/do-build $version $REVISION" >> $LOGFILE 2>&1; then
		rm status/$distro
		echo Build failed, see log in $LOGFILE for details
		exit 1;
	fi

else
	scp do-zip-build ../conf/$package/*.patch defs/$package $source_path/$package/*-$version.tar.gz $source_path/$package/*-$version.zip $target_host:$jaildir/tmp 

	if ! ./jail-do $distro "/tmp/do-zip-build $REVISION $package $distro $version" >> $LOGFILE 2>&1; then
		rm status/$distro
		echo Build failed, see log in $LOGFILE for details
		exit 1;
	fi
fi

mkdir -p $package_path/$DEST_ROOT/$package/$VER_PATH
scp $target_host:$jaildir/tmp/builder/built-packages/* $target_host:$jaildir/tmp/scratch/*.spec $package_path/$DEST_ROOT/$package/$VER_PATH

rm status/$distro

