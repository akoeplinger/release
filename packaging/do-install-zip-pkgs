#!/usr/bin/env python

#  File location is where the actual files will be installed
#  Relocation destination is where the files will eventually be run from

# Will be /tmp/build_deps for the packaging system


import sys
import distutils.dir_util
import os
import glob
import re


import utils

if len(sys.argv) < 3:
	print "Usage: ./do-install-zip-pkgs <file location> <relocation destination> [ full path to packages... ]"
	print "  Note: full path to packages is usually a glob"
	sys.exit(1)

dest = sys.argv[1]
reloc = sys.argv[2]

package_files = sys.argv[3:]

print " *** Installing to %s for destination %s *** " % (dest, reloc)

if not os.path.exists(dest):
	distutils.dir_util.mkpath(dest)

os.chdir(dest)


for package_file in package_files:
	utils.extract_file(package_file, preserve_symlinks=1)


### Change prefix in the .pc files ###
parameter_map = {}
# Note: using substitute_parameters_in_file uses re.sub, and using ^ works best with re.M, otherwise
#  the ^ only matches at the beginning of the string
parameter_map[re.compile("^prefix=.*", re.M)] = "prefix=" + reloc

# This is specifically for monodoc
parameter_map[re.compile("^sourcesdir=.*", re.M)] = "sourcesdir=" + reloc + "/lib/monodoc/sources"

# for all of the .pc files
for root, dirs, files in os.walk('.'):
	for file in files:
		if re.compile('\.pc$').search(file):
			utils.substitute_parameters_in_file(os.path.join(root, file), parameter_map)

# Write out an env.sh in the $RELOC dir so we can use that when we build
# This needs to by dynamic
env = open('env.sh', 'w')
env.write('PKG_CONFIG_PATH=%s/lib/pkgconfig:$PKG_CONFIG_PATH\n' % reloc)
env.write('PATH=%s/bin:$PATH\n' % reloc)

# Needed for the solaris builds so far
env.write('LDFLAGS=-L%s/lib\n' % reloc)
env.write('CPPFLAGS=-I%s/include\n' % reloc)
env.write('LD_LIBRARY_PATH=%s/lib:$LD_LIBRARY_PATH\n' % reloc)
env.write('MANPATH=%s/share/man:%s/man:$MANPATH\n' % (reloc, reloc))

# This is for macos
#env.write('DYLD_LIBRARY_PATH=%s/lib\n' % (reloc) )

# Use this method for older shells
env.write('export PKG_CONFIG_PATH PATH LDFLAGS CPPFLAGS LD_LIBRARY_PATH MANPATH\n')


env.close()
os.chmod('env.sh', 0755)

# Write out csh environment file
env = open('env.csh', 'w')
env.write('setenv PKG_CONFIG_PATH %s/lib/pkgconfig:$PKG_CONFIG_PATH\n' % reloc)
env.write('setenv PATH %s/bin:$PATH\n' % reloc)

env.write('setenv LDFLAGS -L%s/lib\n' % reloc)
env.write('setenv CPPFLAGS -I%s/include\n' % reloc)
env.write('setenv LD_LIBRARY_PATH %s/lib:$LD_LIBRARY_PATH\n' % reloc)
env.write('setenv MANPATH %s/share/man:%s/man:$MANPATH\n' % (reloc, reloc))

# This is for macos
#env.write('setenv DYLD_LIBRARY_PATH %s/lib\n' % (reloc) )

env.close()
os.chmod('env.csh', 0755)

# Fake out .la files (for solaris, win32 doesn't seem to need this
parameter_map = {}
parameter_map[re.compile("^libdir=.*", re.M)] = "libdir='" + reloc + "/lib'"
parameter_map[re.compile("/usr/local")] = reloc
parameter_map[re.compile("/opt/csw")] = reloc
parameter_map[re.compile("/tmp/install")] = reloc

for root, dirs, files in os.walk('.'):
	for file in files:
		if re.compile('\.la$').search(file):
			utils.substitute_parameters_in_file(os.path.join(root, file), parameter_map)



os.chdir('bin')

# Only do this for cygwin (basically for monodoc for gtk-sharp2)
if os.path.exists('c:/cygwin/usr/'):
	print "Making cygwin specific massages to bin/* wrappers..."
	parameter_map = {}
	parameter_map[re.compile("^prefix=/usr", re.M)] = "prefix=C:/cygwin/usr"
	parameter_map[re.compile("^monodocdir=/usr", re.M)] = "monodocdir=C:/cygwin/usr"

	for root, dirs, files in os.walk('.'):
		for file in files:
			# Search and replace in all files containing #!/bin/sh and /tmp/install
			utils.substitute_parameters_in_file(os.path.join(root, file), parameter_map, qualifier=re.compile('#!/bin/sh.*/usr', re.M | re.DOTALL))


# Now for the rest of the files in bin
print "Massaging bin/* wrappers..."
parameter_map = {}
# For packages we build
parameter_map[re.compile("/tmp/install")] = reloc
# For mac builds
mac_prefix_regex = "/Library/Frameworks/Mono.framework/Versions/.*?"
parameter_map[re.compile(mac_prefix_regex + "/")] = reloc + "/"
# For solaris builds
parameter_map[re.compile("/opt/mono")] = reloc
# For packages we consume (noarch rpms)
parameter_map[re.compile("/usr")] = reloc

for root, dirs, files in os.walk('.'):
	for file in files:
		# Search and replace in all files containing #!/bin/sh and /tmp/install
		utils.substitute_parameters_in_file(os.path.join(root, file), parameter_map, qualifier=re.compile('#!/bin/sh.*(/tmp/install|/usr|/Library/Framework|/opt/mono)', re.M | re.DOTALL))

os.chdir('..')

# Relocate files on macos
print "Relocating dylib files..."
# for all of the .dylib files
# Notes from http://www.opendarwin.org/pipermail/darwinports/2004-August/021704.html
#  So, each dylib needs to change the reference to itself using:
#  install_name_tool -id /foo/lib/libintl.3.dylib  libintl.3.4.0.dylib

# And then each reference to a symbol that was in /tmp/install needs to be updated using
#  install_name_tool -change <old> <new> <file>

for root, dirs, files in os.walk('.'):
	for file in files:
		path_on_disk = root + os.sep + file
		# Do this on dylib files as well as the files in bin
		if ( re.compile('\.dylib$').search(file) or root == "./bin" ) and not os.path.islink(path_on_disk):

			utils.debug=0

			old_filename = os.path.abspath('/tmp/install/%s/%s' % (root, file) )
			new_filename = os.path.abspath( re.sub('/tmp/install', reloc, old_filename) )
			new_filename = os.path.abspath( re.sub('/tmp/install', reloc, old_filename) )

			(code, output) = utils.launch_process('otool -L %s' % path_on_disk, print_output=0)

			# Skip non object files or if otool failed (doesn't exist)
			if re.compile('is not an object file', re.M).search(output) or code:
				continue

			print 'Relocating %s' % path_on_disk
			utils.launch_process('install_name_tool -id %s %s' % (new_filename, path_on_disk ) )

			# Get update references (So we don't try to change reference to ourselves)
			(code, otool_output) = utils.launch_process('otool -L %s' % path_on_disk, print_output=0 )
			#print output

			# libmono-profile-cov is still having an issue getting relocated... check this website for a possible solution:
			# http://lists.apple.com/archives/darwin-development/2003/Sep/msg00274.html
			
			# -Wl,-header-pad_max_install_names ... didn't work... ?  Resorting to using @executable_path for anything that files with full path

			# Our prefixes to search and replace
			#  Todo...  
			prefixes = [ '/tmp/install', '/tmp/build_deps', mac_prefix_regex ]
			for prefix in prefixes:
				#print "Prefix: %s" % prefix
				# Update /tmp/install references to the new target location
				#Sample output: /tmp/install/lib/libjpeg.62.dylib (compatibility version 63.0.0, current version 63.0.0)
				#print "otool_output: '%s'" % otool_output
				for match in re.compile('\s+(%s/(.*?)) \(' % prefix, re.S | re.M).finditer(otool_output):
					#print "Found Match1: %s " % match.group(1)
					#print "Found Match2: %s " % match.group(2)

					full_path = match.group(1)
					prefix_on_path = match.group(2)

					# This almost works... except for libmono-profiler-cov's reference to libintl
					command1 = 'install_name_tool -change %s %s/%s %s' % (full_path, reloc, prefix_on_path, path_on_disk) 

					# As expected, this command fails because the reference names are too long.  using @executable_path greatly shortens the string length
					#command = 'install_name_tool -change %s /bunch/of/junk%s/%s %s' % (full_path, reloc, prefix_on_path, path_on_disk) 
					#print command1
					(code, output) = utils.launch_process(command1)

					if code:
						print "*** WARNING *** problems executing: %s" % command1
						print "Falling back to @executable_path with install_name_tool ... "

						# This string is shorter so it works with libmono-profiler-cov
						# But doesn't seem to work when I install to /tmp/build_deps... (libgdiplus configure test for libtiff fails)
						command2 = 'install_name_tool -change %s @executable_path/../%s %s' % (full_path, prefix_on_path, path_on_disk) 
						(code, output) = utils.launch_process(command2)
						if code:
							print "*** ERROR *** problems executing: %s" % command2
							sys.exit(1)
						
				

			#  Final check, make sure that each reference has a valid prefix
			(code, output) = utils.launch_process('otool -L %s' % path_on_disk, print_output=0)
			output_array = output.split('\n')
			for i in range(1, len(output_array)):
				if not re.compile('(%s|\/usr|@executable_path)' % reloc).search(output_array[i]):
					print reloc
					print "Relocating %s failed:" % path_on_disk
					print output
					sys.exit(1)


# Avoids "Application Error" on win32 and allows scripts to be run
for file in glob.glob('bin/*'):
	os.chmod(file, 0755)


