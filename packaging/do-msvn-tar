#!/usr/bin/env python
#
# The driver script to make a tarball
#

import sys
import os
import tempfile
import shutil
import glob
import distutils.dir_util
import getpass
import getopt
import urlparse
import re

sys.path.append('.')

import packaging
import config
import utils

output_timeout = 600

# Some things we'll need to run as root
EXEC_AS_ROOT = 'sudo'

# Collect args
fresh_checkout = False
opts, remaining_args = getopt.getopt(sys.argv[1:], "", [ "fresh_checkout" ])
for option, value in opts:
	if option == "--fresh_checkout":
		fresh_checkout = True

(HEAD_or_RELEASE, package, version) = remaining_args

os.chdir('source_dist_creator')

# they key needs to be owned by the user so ssh doesn't reject the key
utils.launch_process('%s chown %s distro_source_key' % (EXEC_AS_ROOT, getpass.getuser()))
utils.launch_process("%s mount -t proc none /proc &> /dev/null" % EXEC_AS_ROOT)

temp_dir = os.getcwd()

dummy_env = ""
package_obj = packaging.package(dummy_env, package, inside_jail=True)

os.mkdir('src')
os.chdir('src')

# Construct subversion path of location we want to create a tarball from
svn_paths = []
if HEAD_or_RELEASE == "HEAD":
	rev_arg = "-r " + version
	if package_obj.info.has_key('HEAD_PATH'):
		svn_paths += package_obj.info['HEAD_PATH']

else:
	rev_arg = ""
	if package_obj.info.has_key('RELEASE_PATH'):
		svn_paths += package_obj.info['RELEASE_PATH']

	# Do some svn_path munging
	# (options: [[version]], [[versiondot]], [[gtksharp2ver]]
	version_dot = version
	version_hyphen = version.replace('.', '-')

	for i in range(0, len(svn_paths)):
		svn_paths[i] = svn_paths[i].replace('[[versiondot]]', version_dot)
		svn_paths[i] = svn_paths[i].replace('[[version]]', version_hyphen)


# use the key in /usr/share/ximian-build-system/conf/ssh
# This needs to be exported to the environment
SVN_SSH = "ssh -i %s/distro_source_key %s " % (temp_dir, config.ssh_options)
SVNEXPORT = "svn export -q " + rev_arg
MONO_ROOT = config.MONO_ROOT
SVN_PATHS = ":".join(svn_paths)
VERSION = version

# print env
print "SVN_SSH: %s" % SVN_SSH
print "SVNEXPORT: %s" % SVNEXPORT
print "MONO_ROOT: %s" % MONO_ROOT
print "HEAD_or_RELEASE: %s" % HEAD_or_RELEASE
print "SVN_PATHS: %s" % SVN_PATHS
print "VERSION: %s" % VERSION

# set env
os.environ['SVN_SSH'] = SVN_SSH
os.environ['SVNEXPORT'] = SVNEXPORT
os.environ['MONO_ROOT'] = MONO_ROOT
os.environ['HEAD_or_RELEASE'] = HEAD_or_RELEASE
os.environ['SVN_PATHS'] = SVN_PATHS
os.environ['VERSION'] = VERSION

# If they don't have any svn_paths, they MUST specify BUILD_DIR
if package_obj.info.has_key('BUILD_DIR'):
	build_dir = package_obj.info['BUILD_DIR']
else:
	try:
		build_dir = os.path.basename(svn_paths[0])
	except:
		print "You must specify BUILD_DIR in def file when not using RELEASE or HEAD PATH"
		sys.exit(1)

# Maybe we'll eventually use python code in the def file someday...
update_version_file = package_obj.get_info_var('update_version_file')
if not update_version_file:
	update_version_file = """
	sed -i "s/\(AM_INIT_AUTOMAKE.*,\\).*)/\\1$VERSION)/" configure.in
"""

make_dist = package_obj.get_info_var('make_dist')
if not make_dist:
	make_dist = """
	# profile is needed on suse systems with gnome in /opt
	. /etc/profile
        ./autogen.sh
        make dist-bzip2
"""

get_source = package_obj.get_info_var('get_source')

# pwd: /tmp/monobuild/source_dist_creator/src

### Execute the source creating functions ###
def_file = temp_dir + os.sep + package

# get_source
if get_source:
	utils.launch_process(get_source, print_command=1, output_timeout=output_timeout)
else:
	# Put cachedir up two levels so it will remain through cleanup
	cache_dir = os.path.abspath( os.path.join(temp_dir, "..", "..", "src_cache", package, HEAD_or_RELEASE) )

	# Potentially clean up source to do a fresh checkout (required for modules that use 'svn:external'
	if fresh_checkout:
		print "Removing cache..."
		utils.launch_process("rm -Rf %s" % cache_dir)

	for path in svn_paths:
		module = os.path.basename(path)

		# Do we have a working copy already?
		if os.path.exists("%s/%s" % (cache_dir, module)):
			# svn switch  (will update if the path in the working copy hasn't changed, this ensures have the right path)

			# rewrite the url, just in case we've changed it (it's a really fast command, nothing to loose)
			(status, output) = utils.launch_process("cd %s/%s; svn info" % (cache_dir, module), output_timeout=output_timeout )
			if status:
				print "Error getting repo url..."
				sys.exit(1)
			old_revision, = re.compile("Revision: (.*)").search(output).groups()

			old_mono_host, = re.compile("Repository Root: (.*)").search(output).groups()
			stuff = urlparse.urlparse(old_mono_host)
			old_mono_host = stuff[0] + "://" + stuff[1]

			stuff = urlparse.urlparse(MONO_ROOT)
			new_mono_host = stuff[0] + "://" + stuff[1]

			(status, output) = utils.launch_process("cd %s/%s; svn switch --relocate %s %s" % (cache_dir, module, old_mono_host, new_mono_host), output_timeout=output_timeout )
			if status:
				print "Error relocating repo... exiting."
				sys.exit(1)

			command = 'cd %s/%s; svn switch %s %s/%s' % (cache_dir, module, rev_arg, MONO_ROOT, path)
			(status, output) = utils.launch_process(command, output_timeout=output_timeout, print_command=1)

			command = 'cd %s/%s; svn log -v %s' % (cache_dir, module, rev_arg)
			(status, output) = utils.launch_process(command, output_timeout=output_timeout, print_command=1)
		else:
			# create cache dir
			if not os.path.exists(cache_dir): distutils.dir_util.mkpath(cache_dir)
			#check out working copy
			command = "cd %s; svn checkout -q %s %s/%s" % (cache_dir, rev_arg, MONO_ROOT, path)
			(status, output) = utils.launch_process(command, output_timeout=output_timeout, print_command=1)

		if status:
			print "*** Error *** getting/updating source failed (this is usually because of a malformed url, ex: invalid version, or svn/ssh failed)"
			sys.exit(1)


		# svn export from working copy
		#command = "%s %s/%s" % (SVNEXPORT, MONO_ROOT, path)
		#command = "%s %s/%s" % (SVNEXPORT, cache_dir, module)
		# Note: using -r rev with svn export from a local cache dir will connect to the svn server... bad

		#command = "svn export -q %s/%s" % (cache_dir, module)
		#  svn export from a working dir pegs the processor at 99%!!  also bad... it also takes longer (3 minutes... ?)

		#  Use rsync instead?  probably...
		# results: using this instead of svn export recovers those 3 minutes
		command = "rsync -a --exclude '.svn/' %s/%s ." % (cache_dir, module)
		(status, output) = utils.launch_process(command, output_timeout=output_timeout, print_command=1)
		if status:
			print "Error making clean copy of the source tree (did rsync fail, or is it installed?)"
			sys.exit(1)


# Go inside the source tree
os.chdir(build_dir)

# update_version_file (If this is a snapshot build)
if HEAD_or_RELEASE == "HEAD":
	utils.launch_process(update_version_file )

# pwd: /tmp/monobuild/source_dist_creator/src/$build_dir

# make_dist
utils.launch_process(make_dist)

### End of source creating functions ###

### Finish moving things around
os.mkdir(temp_dir + '/result')

found_source_file = 0
source_files = glob.glob('*.zip') + glob.glob('*.tar.gz') + glob.glob('*.tar.bz2')

if len(source_files) == 1:
	os.rename(source_files[0], temp_dir + '/result/%s' % source_files[0])
	found_source_file = 1
	print "print source filename..."
	print source_files[0]

# Propogate exit code
if not found_source_file:
	sys.exit(1)

