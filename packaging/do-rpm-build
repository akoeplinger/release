#!/usr/bin/env python

import os
import sys
import glob
import shutil
import getpass
import stat
import re

# Weird, why isn't '.' in the path already? (because utils isn't in the same location as ./do-build)
sys.path.append('.')

import utils

(version, rev) = sys.argv[1:]

# Some things we'll need to run as root
EXEC_AS_ROOT = 'sudo'

os.chdir('build')

temp_build_dir = os.getcwd()

# rpm needs this to be happy
for f in os.listdir('.'):
	# Skip these, so subsequent builds from inside jail can be run without perm errors
	if os.path.isfile(f) and f != "monobuild.rpmrc" and f != "monobuild.rpmmacros":
		os.system("%s chown root:root %s" % (EXEC_AS_ROOT, f) )

macrofiles = """
	/usr/lib/rpm/macros
	/usr/lib/rpm/%{_target}/macros
	/usr/lib/rpm/suse_macros
	/etc/rpm/macros.*
	/etc/rpm/macros
	/etc/rpm/%{_target}/macros
	monobuild.rpmmacros
""".split()

# 'macrofiles:' stolen from buildbuddy
open('monobuild.rpmrc', 'w').write("macrofiles: " + ":".join(macrofiles) )

# Set some macros for the redhat based clients.  Even though redhat doesn't define any
#  macros for this, the suse build service does.  (In fact, even dag rpms suggest passing
#  the dist as a define on the rpm build command)
# This isn't needed for suse... they define versions in the macro files
version_macro = ""
for p in "redhat-release fedora-release centos-release".split():
	(code, output) = utils.launch_process("rpm -q --queryformat '%%{VERSION}' %s" % p, print_output=0)

	# This package exists
	if not code:
		if p == "redhat-release":
			mat = re.search("(\d)[aew]s", output, re.I)
			mat2 = re.search("(\d)Server", output, re.I)
			if mat:
				# works for rhel4
				version_macro = "%%rhel_version\t%s00" % mat.group(1)
			elif mat2:
				# rhel5 uses version 501 in build service, so append 00 to rhel versions
				version_macro = "%%rhel_version\t%s00" % mat2.group(1)
			else:
				version_macro = "%%redhat_version\t%s" % output
		if p == "fedora-release":
			version_macro = "%%fedora_version\t%s" % output
		if p == "centos-release":
			version_macro = "%%rhel_version\t%s" % output

# Ignore unpackaged files for HEAD, but not for RELEASE
if os.environ['HEAD_or_RELEASE'] == 'RELEASE':
	unpack_term_build = 1
else:
	unpack_term_build = 0

# need to set some rpmrc macros to be able to build in this directory
# can't use $build_arch in rpmfilename, need to find out why some distros build as i686
open('monobuild.rpmmacros', 'w').write("""
%%_topdir	%s
%%_sourcedir	%%{_topdir}
%%_builddir	%%{_topdir}/BUILD
%%_rpmdir	%%{_topdir}/built-packages
%%_rpmfilename	%%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm
%%buildroot	%s/buildroot
%%_binary_payload	w9.bzdio
%%_unpackaged_files_terminate_build	%s
%%monobuild	1
%s
""" % (temp_build_dir, temp_build_dir, unpack_term_build, version_macro) )

for d in "BUILD built-packages".split():
	if os.path.exists(d): shutil.rmtree(d) # normall won't have to be cleaned up, but do it so we can rerun builds inside jail
	os.mkdir(d)

# The spec file needs to be writable by the current user
os.system("%s chown %s *.spec" % (EXEC_AS_ROOT, getpass.getuser()) )

# This is where the spec file munging would have to take place... could be done
#   on the host side, doesn't really matter.
for f in glob.glob('*.spec'):
	# TODO: Need to have regex matches: ^Version
	utils.substitute_parameters_in_file(f, {
		'Version:.*':		'Version:\t%s' % version,
		'Release:.*':		'Release:\t%s' % rev,

		# How to define using patches? will need to pass this in, disable for now...
		#'.*%patch.*':		'',
		#'Patch.*:.*':		'',
		# Use patches afterall...

		# TODO: paste in .changes like autobuild

		})


os.system("%s mount -t proc none /proc &> /dev/null" % EXEC_AS_ROOT)

rcfiles = """
	/usr/lib/rpm/rpmrc
	monobuild.rpmrc
""".split()

files = []
for f in rcfiles:
	if os.path.exists(f): files.append(f)

# Will this command need to change from distro to distro? (possibly on REALLY old distros)
#command = "rpmbuild --rcfile=/usr/lib/rpm/rpmrc:%s -bb *.spec" % ":".join(files)
command = "rpmbuild --macros=%s -bb *.spec" % ":".join(macrofiles)
print "Executing: " + command
sys.stdout.flush()
if os.system(command): sys.exit(1)

# cleanup
#  Can't run this, because /proc needs to be mounted for postbuild steps
#os.system("%s umount /proc &> /dev/null" % EXEC_AS_ROOT)

# Keep copy of the spec file
for f in glob.glob('*.spec'):
	shutil.copy(f, temp_build_dir + os.sep + 'built-packages')

# Change perms on macro and rc file so if we want to build from inside jail again, we don't get errors
for f in "monobuild.rpmrc monobuild.rpmmacros".split():
	os.system("%s chown %s %s" % (EXEC_AS_ROOT, getpass.getuser(), f) )
