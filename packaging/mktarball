#!/bin/sh

msvn_tar () {
    get_svn_path
    scp do-msvn-tar $target_host:$jaildir/tmp
    ./jail-do $distro "mount /proc &> /dev/null ; sudo -H -u builder sh -x /tmp/do-msvn-tar $package $svn_path $snapshot_rev" || return 1
    tarball=`./jail-do $distro "cd /tmp/built-tarball && ls"`
    scp $target_host:$jaildir/tmp/built-tarball/*.tar.gz $source_path/$real_package

    # Keep a map of which params produce which tarball
    echo $key=$source_path/$real_package/$tarball >> tarball_map
}

get_svn_path () {
    case "$version" in
	snap )
	    if [ x$snapshot_rev == x ]; then
		echo "You need to specify a revision"
		exit 1
	    fi
	    svn_path=$HEAD_PATH
	    ;;
	*)
	    unset snapshot_version
	    versiondash=${version//\./-}
	    version_match=\\[\\[version\\]\\]
	    versiondot_match=\\[\\[versiondot\\]\\]
	    gtksharp2ver_match=\\[\\[gtksharp2ver\\]\\]
	    svn_path=${RELEASE_PATH//$version_match/${versiondash}}
	    svn_path=${svn_path//$versiondot_match/${version}}

	    if expr match $version '2\.5' ; then
		svn_path=${svn_path//$gtksharp2ver_match/${version/#2.5/2.3}_${version}}
	    else
	        svn_path=${svn_path//$gtksharp2ver_match/${version/#2.6/2.4}_${version}}
	    fi

	    ;;
    esac
}


distro=$1
package=$2
version=$3
snapshot_rev=$4

# Argument checking
if [ -z $distro ] || [ -z $package ] || [ -z $version ]; then
	echo ""
	echo "Usage: mktarball <target jail> <package> <version|snap> [svn rev]"
	echo " where version is a tagged version from svn"
	echo " Note: if you specify snap, you must specify svn rev"
	echo ""
	exit 1
fi

if [ -z $snapshot_rev ]; then
	source_path=sources
else
	source_path=snapshot_sources
fi

real_package=$package

#
# Total hack for the wacked out gtk# stuff
#
if [[ $package = "gtk-sharp-2.6" ]]; then
	real_package="gtk-sharp-2.0"
fi

if [[ $package = "gtk-sharp-2.0" ]]; then
	# Hack to get stuff from the right path
	version=${version/#2.3/2.5}
	version=${version/#2.4/2.6}
fi

. shared-code.sh
. conf/$distro
. defs/$real_package

# Check to see if this tarball is already on disk
key=$package:$version:$snapshot_rev
echo Checking for duplicates in tarball_map with key: $key
data=`grep $key tarball_map`
if [ ! -z $data ]; then
	# split on =
	IFS==
	set -- $data
	# Key set to $1
	echo Tarball exists: $2
	exit 1
fi

mkdir -p $source_path/$real_package

if test -f status/$distro; then
   echo $1 jail is busy
   exit 1
fi

echo > status/$distro;

if [ ! ${#MONO_DEPS[@]} -eq 0 ]; then
	if ! ./install-deps $distro ${MONO_DEPS[@]}; then
		rm status/$distro
		echo Dependency installation failed, see log in $LOGFILE for details
		exit 1
	fi
fi

if ! get_tarball ; then 
	rm status/$distro
	echo Tarball creation failed
	exit 1
fi

rm status/$distro

