#!/usr/bin/env python

# TODO: Catch sigint, and unlock jail...

import os
import sys
import distutils.dir_util
import glob
import getopt

import pdb

sys.path += ['../pyutils' ]
import logger
import packaging
import utils
import datastore
import config

def usage():
	print ""
	print "Usage: ./mktarball [--snapshot] [--force] <package> <version|svn rev>"
	print " where version is a tagged released version or an svn revision"
	print " Note: if you specify snapshot, you must specify 'svn rev' instead of 'version'"
	print " --force is used to override an already existing tarball, "
	print "   or retry a version that's know to fail"
	print ""

HEAD_or_RELEASE = "RELEASE"
force = False
opts, remaining_args = getopt.getopt(sys.argv[1:], "", [ "snapshot", "force" ])
for option, value in opts:
        if option == "--snapshot":
                 HEAD_or_RELEASE = "HEAD"
        if option == "--force":
                 force = True

### Command line arg handling ###
try:
	(package, version) = remaining_args
except:
	usage()
	sys.exit(1)

### End of Command line arg handling ###

repo = datastore.source_file_repo()

# Check to see if this is already there (if we haven't used the force option to override)
if repo.contains(HEAD_or_RELEASE, package, version) and not force:
	# Check to see if the state is failure
        repo_info = repo.get_tarball_state_info(HEAD_or_RELEASE, package, read_info=False)
	if repo_info['state'][version] == "failure":
		print "Tarball creation for %s version %s (%s) failed already" % (package, version, HEAD_or_RELEASE) 
		print "  Use the --force option if you want to try again"
	else:
		print "Source file for %s version %s (%s) exists, use --force to override" % (package, version, HEAD_or_RELEASE) 
	sys.exit(1)

LOGFILE = "%s/%s/%s/%s.log" % (config.mktarball_logs, HEAD_or_RELEASE, package, version)
log_obj = logger.Logger(filename=LOGFILE)


# Get tarball path from def file
package_obj = packaging.package("", package, HEAD_or_RELEASE=HEAD_or_RELEASE)
if package_obj.info.has_key('MKTARBALL_HOST'):
	distro = package_obj.info['MKTARBALL_HOST']
else:
	distro = config.mktarball_host

log_obj.log("Sources path: %s\n" % package_obj.source_fullpath)
log_obj.log("Using distro: %s\n" % distro)

# This will also grab an exclusive lock, and fail if it can't
conf = packaging.buildconf(distro, my_logger=log_obj)

# Update tarball status to "inprogress"
repo.add_file(HEAD_or_RELEASE, package, version, "inprogress")

# Install deps from HEAD instead of RELEASE for this package
head_deps = ""
if package_obj.get_info_var('MKTARBALL_HEAD_DEPS'):
	head_deps = "--HEAD_or_RELEASE=HEAD"

if package_obj.info.has_key('MONO_DEPS'):
	(status, output) = utils.launch_process('./install-deps %s --build_source %s %s' % (head_deps, conf.conf_lock_filename, package), my_logger=log_obj)
	if status:
		conf.buildenv.unlock_env()
		log_obj.log("Dependency installation failed\n")
		repo.add_file(HEAD_or_RELEASE, package, version, "failure")
		sys.exit(3)

temp_dir = conf.env_vars['build_location'] + os.sep + 'source_dist_creator'

# Clean up
conf.buildenv.remove_path(temp_dir)

# Copy some files over and execute!
# Also copy over def_alias files
files_to_copy = [ 'distro_source_key', 'do-msvn-tar', 'defs/%s' % package]
for f in package_obj.get_aliases():
	files_to_copy += ['defs/' + f ]

support_files_to_copy = []
for i in 'buildenv.py config.py logger.py remote_shell.py packaging.py shell_parse.py utils.py'.split():
	support_files_to_copy += ['../pyutils/' + i]

# This command also creates the dest dir
conf.buildenv.copy_to(support_files_to_copy, conf.env_vars['build_location'])
conf.buildenv.copy_to(files_to_copy, temp_dir)

fresh_checkout = ""
if package_obj.get_info_var('fresh_checkout'):
	fresh_checkout = "--fresh_checkout"

log_obj.log("Starting to build source dist...\n")
# Make this non-interruptable because we don't want the source cache corrupted
(status, output) = conf.buildenv.execute_command('%s/do-msvn-tar %s %s %s %s' % (temp_dir, fresh_checkout, HEAD_or_RELEASE, package, version), interruptable=False )

if status:
        conf.buildenv.unlock_env()
        log_obj.log("Source dist file creation failed\n")
	repo.add_file(HEAD_or_RELEASE, package, version, "failure")
        sys.exit(1)

# get tarball filename
tarball = output.split().pop()

# Copy file back
#  Note: the tarball var is expected to have be in this format, ex:  mono-1.1.13.4.tar.gz
conf.buildenv.copy_from('%s/result/%s' % (temp_dir, tarball), package_obj.source_fullpath)

# Keep a map of which params produce which tarball
repo.add_file(HEAD_or_RELEASE, package, version, package_obj.source_relpath + os.sep + tarball)

conf.buildenv.unlock_env()

print "Done!"

