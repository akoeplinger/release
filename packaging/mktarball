#!/usr/bin/env python

import os
import sys
import distutils.dir_util
import glob
import commands

import pdb

sys.path += ['../pyutils' ]
import logger
import packaging
import utils
import datastore
import config

def usage():
	print ""
	print "Usage: ./mktarball <package> <version|snap> [svn rev]"
	print " where version is a tagged version from svn"
	print " Note: if you specify snap, you must specify svn rev"
	print ""


### Command line arg handling ###
if len(sys.argv) < 3:
	usage()
	sys.exit(1)

package=sys.argv[1]
version=sys.argv[2]

# Optional snapshot rev
snapshot_rev = ""
if len(sys.argv) > 3:
	if len(sys.argv) < 4:
		usage()
		sys.exit(1)
	snapshot_rev=sys.argv[3]

# Validate args ... ?

### End of Command line arg handling ###

LOGFILE = "tarball_logs/%s/%s-%s.log" % (package, version, snapshot_rev)
log_obj = logger.Logger(filename=LOGFILE)

if snapshot_rev:
	source_path = "snapshot_sources"
else:
	source_path = "sources"

log_obj.log("Sources path: " + source_path)

repo = datastore.source_file_repo()

# Check to see if this is already there
if repo.contains(package, version, snapshot_rev):
	log_obj.log("Source file for %s version %s (revision %s) exists" % (package, version, snapshot_rev) )
	sys.exit(1)

package_path = source_path + os.sep + package
distutils.dir_util.mkpath(package_path)

# Get tarball path from def file
package_obj = packaging.package("", package)
if package_obj.info.has_key('MKTARBALL_HOST'):
	distro = package_obj.info['MKTARBALL_HOST']
else:
	distro = config.mktarball_host
log_obj.log("Using distro: " + distro)

env = packaging.buildenv(distro, logger=log_obj)

if env.is_locked():
	log_obj.log("%s jail is busy" % distro )
	sys.exit(2)

env.lock_env()

package_obj = packaging.package(env, package)

if package_obj.info.has_key('MONO_DEPS'):
	(status, output) = utils.launch_process('./install-deps %s %s' % (distro, package), logger=log_obj)
	if status:
		env.unlock_env()
		log_obj.log("Dependency installation failed")
		sys.exit(3)


# Copy some files over and execute!
files_to_copy = [ 'do-msvn-tar', 'defs/%s' % package] + glob.glob('../pyutils/*.py') 
env.ssh.copy_to(files_to_copy, '/tmp', mode='scp')

log_obj.log("Starting to build source dist...")
# TODO: may have to escape some stuff here...
(status, output) = env.ssh.execute('mount /proc &> /dev/null ; sudo -H -u builder /tmp/do-msvn-tar %s %s %s' % (package, version, snapshot_rev) )

if status:
        env.unlock_env()
        log_obj.log("Source dist file creation failed")
        sys.exit(1)

# get tarball filename
tarball = output.split().pop()

# Copy file back
#  Note: the tarball var is expected to have be in this format, ex:  mono-1.1/mono-1.1.13.4.tar.gz
env.ssh.copy_from('/tmp/built-tarball/%s' % tarball, package_path )

# Keep a map of which params produce which tarball
repo.add_file(package, version, snapshot_rev, tarball)

env.unlock_env()

print "Done!"

