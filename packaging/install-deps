#!/bin/sh
#
#    Usage: install-deps TARGET <package> <local packages>
#
#       where:
#           package is package to build to install deps for (can also be 'none')
#           local packages is packages in the defs dir and/or urls if distro is zip based
#

. shared-code.sh

TARGET=$1
shift
PACKAGE=$1
shift

DEPS=$*

. conf/$TARGET

PACKAGES=()

if [ -z $USE_ZIP_PKG ] ; then
	packages_dir="packages"

else
	packages_dir="zip_packages"
	if [ ! -e "external_zip_pkg" ] ; then
		mkdir external_zip_pkg
	fi
fi

DISTRO_UNDERSCORES=${TARGET//-/_}

# Install deps for this package, and additional deps on command line, but not this package itself
if [ $PACKAGE != "none" ] ; then
	. defs/$PACKAGE
	# Get distro specific deps for $PACKAGE
	eval DISTRO_DEPS=\${${DISTRO_UNDERSCORES}_ZIP_DEPS[@]}
	DEPS=(${DEPS[@]} ${MONO_DEPS[@]})
fi

# Gather external deps for deps
for dep in ${DEPS[@]} ; do
        . defs/$dep
        eval ZIP_DEPS=\${${DISTRO_UNDERSCORES}_ZIP_DEPS[@]}
        DISTRO_DEPS=(${DISTRO_DEPS[@]} ${ZIP_DEPS[@]})
	DEPS=(${DEPS[@]} ${MONO_DEPS[@]})
done

distro_info $TARGET

for pkg in ${DEPS[@]} ${DISTRO_DEPS[@]} ; do
	# If not a url (TODO: Better method of determining url)
	if [ ${pkg//http:/} == $pkg ] && [ ${pkg//ftp:/} == $pkg ] ; then
		. defs/$pkg
		
		get_destroot

		## Allow zip packages to use the rpms in noarch
		old_packages_dir=$packages_dir
		if [ $DEST_ROOT == "noarch" ] ; then
			packages_dir="packages"
		fi

		if ! latest_version $packages_dir/$DEST_ROOT/$pkg; then
			echo "Could not find $pkg for $TARGET (looking in $packages_dir/$DEST_ROOT)"
			exit 1;
		fi

		for i in `ls $LATEST_VERSION/*.zip $LATEST_VERSION/*.rpm 2>/dev/null` ; do
			PACKAGES=(${PACKAGES[@]} $i)
		done

		# Restore from "packages" from noarch
		packages_dir=$old_packages_dir

	else
		file=`basename $pkg`
		if [ ! -e "external_zip_pkg/$file" ] ; then
			cd external_zip_pkg
			wget $pkg
			cd ..
		fi
		PACKAGES=(${PACKAGES[@]} "external_zip_pkg/$file")

	fi

done

# Make list unique
filename=`mktemp`
for i in ${PACKAGES[@]} ; do
	echo $i >> $filename
done
PACKAGES=(`cat $filename | sort | uniq`)
rm -f $filename

# Testing
#for i in ${PACKAGES[@]} ; do
#	echo $i
#done
#exit 1


# Clean out deps area
./jail-do $TARGET "bash -x -c \"rm -rf /tmp/install-packages /tmp/build_deps; mkdir -p -m777 /tmp/install-packages\""

# Stop if no packages found
[ ${#PACKAGES[@]} -eq 0 ] && exit 0
scp ${PACKAGES[@]} $target_host:$jaildir/tmp/install-packages

# Install the packages with rpm/rcd
if [ -z $USE_ZIP_PKG ] ; then

	rpm_names=$(rpm -qp --queryformat '%{NAME} ' ${PACKAGES[@]})

	# Use rug if the jail has it
	if ./jail-do $TARGET "bash -x -c \"ls /usr/sbin/rcd\"" ; then

		# check if rcd is running in this jail and start it if it isn't
		./jail-do $TARGET "bash -x -c \"rug ping\"" || ( ./jail-do $TARGET "bash -x -c \"/usr/sbin/rcd -r \"" && echo Wait for rcd to come alive... && sleep 5 )

		./jail-do $TARGET "bash -x -c \"rug rm -y $rpm_names\""
		./jail-do $TARGET "bash -x -c \"rug in -y -r /tmp/install-packages/*.rpm\""
	else
		scp ./remove-rpms $target_host:$jaildir/tmp
		./jail-do $TARGET "bash -x -c \"/tmp/remove-rpms $rpm_names\""
		./jail-do $TARGET "bash -x -c \"rpm -Uvh /tmp/install-packages/*.rpm\""
	fi

else
	scp do-install-zip-pkgs $target_host:$jaildir/tmp/install-packages
	./jail-do $TARGET "bash -x -c \"/tmp/install-packages/do-install-zip-pkgs /tmp/build_deps /tmp/install-packages/*\""

fi

