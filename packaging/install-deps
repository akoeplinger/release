#!/usr/bin/env python
#
#    Usage: install-deps TARGET <package> <local packages>
#
#       where:
#           package is package to build to install deps for (can also be 'none')
#           local packages is packages in the defs dir and/or urls if distro is zip based
#

# TODO: be able to install from snapshot_packages  (RELEASE_or_HEAD)


import os
import sys
import re
import glob

sys.path += ['../pyutils']

import packaging
import utils

import pdb

if len(sys.argv) < 3:
	print ""
	print "Usage: ./install-deps TARGET <package> <local packages>"
	print " where:"
        print "   package is package to build to install deps for (can also be 'none')"
        print "   local packages is packages in the defs dir and/or urls if distro is zip based"
	print ""
	sys.exit(1)


target = sys.argv[1]
build_deps_package = sys.argv[2]


deps = []
if len(sys.argv) > 3: deps = sys.argv[3:]

target_env = packaging.buildenv(target, print_output=1)



files = []
if build_deps_package != 'none':
	package = packaging.package(target_env, build_deps_package)
	files += package.get_latest_dep_files()

for dep in deps:
	package = packaging.package(target_env, dep)
	files += package.get_latest_files()
	files += package.get_latest_dep_files()


# Remove duplciates
files = utils.remove_list_duplicates(files)


# Stop if no packages found
if len(files) == 0:
	print "No packages found..."
	sys.exit()

# Clean out deps area
target_env.ssh.execute("rm -rf /tmp/install-packages /tmp/build_deps; mkdir -p -m777 /tmp/install-packages")

# copy packages
# It would be nice to see the output...
target_env.ssh.copy_to(files, '/tmp/install-packages', mode='scp', compress=0)

# Install the packages with rpm/rcd
if target_env.info['USE_ZIP_PKG']:

	target_env.ssh.copy_to(['do-install-zip-pkgs', '../pyutils/utils.py'], '/tmp/install-packages', mode='scp')
        (code, output) = target_env.ssh.execute( "/tmp/install-packages/do-install-zip-pkgs /tmp/build_deps /tmp/build_deps /tmp/install-packages/*")

else:

        (code, rpm_names) = utils.launch_process("rpm -qp --queryformat '%%{NAME} ' %s" % " ".join(files))

        # Use rug if the jail has it
	(code, output) = target_env.ssh.execute('ls /usr/sbin/rcd')
	if not code:
                # check if rcd is running in this jail and start it if it isn't
		target_env.ssh.execute('rug ping || ( /usr/sbin/rcd -r  && echo Wait for rcd to come alive... && sleep 5 ) ')
		(code, output) = target_env.ssh.execute('rug rm -y %s ; rug in -y -r /tmp/install-packages/*.rpm' % rpm_names)
        else:
		target_env.ssh.copy_to('remove-rpms', '/tmp')
		(code, output) = target_env.ssh.execute('/tmp/remove-rpms %s ;  rpm -Uvh /tmp/install-packages/*.rpm' % rpm_names)

# Exit with return code...
sys.exit(code)

