#!/bin/bash
#
# Marc Christensen <mchristensen@novell.com>
# 
# Builds a package on all supported its distributions
# Keeps a number of build-slots filled with jobs as long
# as there are jobs to process.
#
# Copyright (C) 2008, Novell Inc.
#
# License: GPL v2
#
#set -x

# Include some pretty colors and functions that use them
. $(dirname $0)/include/colors

# Some vars
JOB_SLOTS=$(cat /proc/cpuinfo | grep processor | wc -l)
export JOB_SLOTS
declare -a JOBS


echo
echo_in_box "Starting multi-build engine with $JOB_SLOTS slots"
echo 

# If build root is defined in .oscrc, grab it's base dir, otherwise, set it to /var/tmp
# We just use this BUILD_ROOT variable to locate logs, but not to set build environments.
BUILD_ROOT=$([ -f $HOME/.oscrc ] && cat $HOME/.oscrc  | grep "^build-root" | sed -e 's/.*=[[:space:]]*\(.*\)\/build-.*$/\1/g')
if [ -z "$BUILD_ROOT" ];
then
   # This is the default location of the build root.  It it wasn't set in
   # the users .oscrc file, then this is were the logs are located.
   BUILD_ROOT=/var/tmp
fi
export BUILD_ROOT

# Make our temp dir
TMP_DIR=/tmp/$(basename $0)
if [ ! -d $TMP_DIR ]
then
   mkdir -p $TMP_DIR
   if [ $? -ne 0 ]
   then
      echo "Failed to create $TMP_DIR"
      exit $E_CANNOT_CREATE_TMP_DIR
   fi
fi
export TMP_DIR

LOCK_FILE_PREFIX="${TMP_DIR}/BUILD_SLOT_"
export LOCK_FILE_PREFIX

# Error codes
E_LOCKFILE_EXISTS=1
E_CANNOT_CREATE_TMP_DIR=2
E_MISSING_SPEC=3
export E_FILE_EXISTS E_CANNOT_CREATE_TMP_DIR E_MISSING_SPEC


# Get the name of out spec file.
# This script expects to work with one spec file that has
# the name of the project (should be the current direcory's
# name followed by '.spec').
# FIXME: There should also be a command line option that should override
# this section.
SPEC_FILE=$(ls *\.spec | tail -1) # Hopefully, there's only one spec file.
export SPEC_FILE
if [ ! -f ${SPEC_FILE} ]
then
   echo
   echo "A proper spec file could not be found. You must exicute this script from"
   echo "within the package's directory.  Exiting"
   echo
   exit $E_MISSING_SPEC
fi 

# make a new timestamp file so we know which RPMs were made
# during this run of the script.
TM_STAMP=$TMP_DIR/make_all_tmstmp
[ -f $TM_STAMP ] && rm $TM_STAMP
touch $TM_STAMP

# Create a new failed log
FAILED_LOG=$TMP_DIR/make_all_failed
export FAILED_LOG
[ -f $FAILED_LOG ] && rm $FAILED_LOG 
touch $FAILED_LOG

# Get the OSes and arches to build on.
# Put the strings into an array
MY_FIFO=$TMP_DIR/myfifo # Make fifo
[ ! -p $MY_FIFO ] && mkfifo $MY_FIFO
exec 42<> $MY_FIFO      # Open fifo for read/write in this shell on arbitrarily chosen file descriptor #42
osc repos 2>&1 | grep  "i586\|x86_64" > $MY_FIFO
COUNT=0
# Insert jobs listed on fd 42 into an array called JOBS
while read -u42 -t1 I   # Read from fd 42
do 
   JOBS[$COUNT]="$I"
   let COUNT++
done
export COUNT
42<&-; 42>&- # Close fd 42

build_package ()
{  # takes three args:
   #  Arg 1: lock file name
   #  Arg 2: job string consisting of distro and arch for a
   #         package to be built on (also used for log file name)
   #  Arg 3: The number of this job. i.e 5 would be the 5th job of $COUNT jobs.

   # Setup/check lock file
   LOCK_FILE="$1"
   if [ -f $LOCK_FILE ]
   then 
      echo "ERROR: $LOCK_FILE already exists, exiting"
      exit $E_FILE_EXISTS
   fi
   echo "$(date)" > "${LOCK_FILE}"
   echo "$2" >> "${LOCK_FILE}"
   
   SLOT=$(echo $(basename $1) | sed -e 's/[^[:digit:]]//g')
   MYDIST=$(echo $2 | sed -e 's@[[:space:]][[:space:]]*@ @g')
   MYDISTUND=$(echo $2 | sed -e 's@[[:space:]][[:space:]]*@_@g')
   BUILD_LOG="$TMP_DIR/${MYDISTUND}-build.log"
   [ -f "$BUILD_LOG" ] && rm -rf "$BUILD_LOG"

   # Start job
   echo_in_blue "Starting job $3/${COUNT}: $MYDIST on slot $SLOT"
   echo "Executing the following command:"  | tee -a "$BUILD_LOG"
   echo "osc build --nochecks --no-verify ${MYDIST} ${SPEC_FILE}" | tee -a "$BUILD_LOG" 
   echo "Log file: ${BUILD_LOG}"
   osc build --nochecks --no-verify ${MYDIST} ${SPEC_FILE} > ${BUILD_LOG} 2>&1
   if ! (tail -50 ${BUILD_LOG} | grep -E "$BUILD_ROOT/build-root.*/usr/src/(redhat|packages)/.*rpm")
   then
      echo "${MYDIST} build failed, check ${BUILD_LOG}" >> ${FAILED_LOG}
      echo_in_red "Finishing job $3/${COUNT}: $MYDIST on slot $SLOT: FAILED" 
   else
      echo_in_green "Finishing job $3/${COUNT}: $MYDIST on slot $SLOT"
   fi

   # Clean up and exit
   rm -f "${LOCK_FILE}"
   exit 0
}

# Main loop
# Start each job
for JOBS_INDEX in $(seq 0 $(( ${#JOBS[@]} - 1 )))
do
   while true
   do # loop till we get a slot. If they're all filled,
      # wait 1 second and try again.
      for I in $(seq -w 0 $(( $JOB_SLOTS - 1 )))
      do
         # If slot is open, start job and leave the inner
         # while loop otherwise, check the next slot
         if [ ! -f "${LOCK_FILE_PREFIX}${I}" ]
         then
            build_package "${LOCK_FILE_PREFIX}${I}" "${JOBS[$JOBS_INDEX]}" $(( $JOBS_INDEX + 1 )) &
            sleep 1
            break 2
         fi
      done
      sleep 1
   done
done

# Wait for all all backgrounded jobs to finish
while jobs | grep 'Stopped\|Running' > /dev/null 2>&1
do
  sleep 1
done

# Find the RPMs that were built
echo 
echo The following RPMs were built:
echo
find $BUILD_ROOT/build-root-*/usr/src/packages -cnewer $TM_STAMP -iname "*rpm"
rm $TM_STAMP
echo
echo_in_red "The following builds failed:"
echo 
cat $FAILED_LOG
echo

