#!/usr/bin/env python

import sys
import os
import shutil
import os.path
import commands
import string
import glob
import distutils.dir_util
import re
import datetime
import uuid
import pdb

# Local common utils
sys.path += [ "../pyutils" ]
import config
import packaging
import utils

# Global constant type vars
cwd = os.getcwd()

installer_conf = packaging.buildconf('win-4-i386', exclusive=False)

# Represents a selection in the installer
class Selection:
	def __init__(self, name, deps=None, packages=None, urls=None):
		self.name = name

		self.packages = packages
		self.deps = deps
		self.urls = urls

		# This is the only way to pass separate default values for mutable objects
		if deps ==     None: self.deps = []
		if packages == None: self.packages = []
		if urls ==     None: self.urls = []

		# Load some package objects
		self.pack_objs = {}
		self.versions = {}
		for pack in utils.remove_list_duplicates(self.deps + self.packages):

			## Total hack to pick the rpm version of mono-basic (contains compiler and runtime) instead of the zip version (only has the runtime)
			if pack == "mono-basic":
				self.pack_objs[pack] = packaging.package(packaging.buildconf('sle-11-i586', exclusive=False),pack)
			else:
				self.pack_objs[pack] = packaging.package(installer_conf,pack)

			self.versions[pack] = self.pack_objs[pack].get_version()

		self.files = self.get_filelist()

	def get_filelist(self):
		# Only compute once
		# TODO: could be redone to use updated runtime_deps stuff in packaging.py, but this should still be ok
		try:
			return self.files
		except AttributeError:
			self.files = []
			
			for package in self.packages:
				self.files += self.pack_objs[package].get_files()

			for dep in self.deps:
				self.urls += self.pack_objs[dep].get_distro_zip_deps() + self.pack_objs[dep].get_distro_zip_runtime_deps()

			for url in self.urls:
				filename = os.path.basename(url)
				url_dest = config.packaging_dir + os.sep + 'external_zip_pkg' + os.sep + 'win-4-i386'
				url_dest_file = url_dest + os.sep + filename
				if not os.path.exists(url_dest_file):
					utils.get_url(url, url_dest)
				self.files += [ url_dest_file ]

			self.files = utils.remove_list_duplicates(self.files)

		return self.files
		



### Main Execution Starts Here ###

if len(sys.argv) < 2:
	print "Usage: buildwindows-installer <mono version> [<revision>]"
	print "Example: buildwindows-installer 1.1.9.1 0"
	sys.exit(1)

# Default to 0 revision
if len(sys.argv) == 2:
	sys.argv.append('0')

output_dir = 'Output/%s/windows-installer/%s' % ( sys.argv[1], sys.argv[2]) 

if os.path.exists(output_dir):
	print "Build already exists: %s (you probably need to bump the revision)" % output_dir
	sys.exit(1)

# Initialize Selection objects each containing an array of Package objects
files_used_in_installer = []
selections = []

selections += [ Selection('mono', packages = "mono boo ikvm nant mono-basic gluezilla".split(), deps='mono gluezilla'.split() ) ]

selections += [ Selection('gtk', deps = "gtk-sharp212".split() ) ]

#selections += [ Selection('gtk-sharp', packages = "gtk-sharp212 mono-tools".split() ) ]
selections += [ Selection('gtk-sharp', packages = "gtk-sharp212".split() ) ]

# Grab the gtk# version, and if there's a revision, ditch it
gtk_sharp_version = selections[len(selections) - 1].versions['gtk-sharp212']
if gtk_sharp_version.count('-'):
	(gtk_sharp_version, revision) = gtk_sharp_version.split('-')

# Hmm... needs to be a better way to package up these samples...
selections += [ Selection('samples', urls = """
http://beefydude.lab.xamarin.com/misc/samples.zip
""".split()
 ) ]

selections += [ Selection('xsp', packages = "xsp".split() ) ]



# Clean up work area
if os.path.exists('build'):
	shutil.rmtree('build')
os.mkdir('build')
os.chdir('build')


# Start gathering, laying down, and extracting 
for selection in selections:
	print "Selection: " + selection.name

	files = selection.files
	files_used_in_installer += map(os.path.basename, files)

	os.mkdir(selection.name)
	os.chdir(selection.name)
	
	for file in files:
		utils.extract_file(file, preserve_symlinks=0)

	os.chdir("..")

# uniqify the files array
files_used_in_installer = utils.remove_list_duplicates(files_used_in_installer)


########################################
# Set default theme
#
os.chdir('gtk')
shutil.copy('share/themes/MS-Windows/gtk-2.0/gtkrc', 'etc/gtk-2.0')

os.chdir('..')

#
########################################

##########################################
# Special case for ms' gdiplus
os.chdir('mono')

os.mkdir('share/doc/gdiplus')
#shutil.move('redist.txt', 'share/doc/gdiplus')
shutil.move('gdiplus/eula.txt', 'share/doc/gdiplus')

#shutil.move('gdiplus.dll', 'bin')
# Need to move it back so it doesn't get grabbed with the mono\* selection
shutil.move('gdiplus/gdiplus.dll', '..')

shutil.rmtree('gdiplus')
os.chdir("..")

##########################################
# Special case for etc/mono/config

os.chdir('mono')


os.chdir("..")


##########################################
# Special case for xsp  (work around as posted in bug #79920)

#What I did to make it work was:
#  1. Create a 'exes' directory under lib/mono/1.0 and lib/mono/2.0
#  2. Move xsp.exe from lib/mono/1.0 to to lib/mono/1.0/exes
#  3. Move xsp2.exe from lib/mono/2.0 to to lib/mono/2.0/exes
#  4. Update xsp, xsp.bat, xsp2 and xsp2.bat to the new directory.

os.chdir('xsp')

os.mkdir('lib/mono/2.0/winhack')

os.rename('lib/mono/2.0/xsp2.exe', 'lib/mono/2.0/winhack/xsp2.exe')

os.mkdir('lib/mono/4.0/winhack')

os.rename('lib/mono/4.0/xsp4.exe', 'lib/mono/4.0/winhack/xsp4.exe')

# Munge wrappers
parameter_map = { 
	re.compile('lib/mono/2.0'): "lib/mono/2.0/winhack",
	re.compile('lib/mono/4.0'): "lib/mono/4.0/winhack",
}

for file in "xsp xsp1 xsp2 xsp4".split():
	utils.substitute_parameters_in_file('bin' + os.sep + file, parameter_map)

os.chdir('..')

# note: No changes needed for startXSP*

#
#########################################


# Add random files for shortcuts
shutil.copy('../bat/setmonopath.bat', 'mono/bin')
shutil.copy('../setup-files/mono.ico', 'mono')
shutil.copy('../setup-files/ReleaseNotes.txt', 'mono')
commands.getoutput('cp -f ../bat/startXSP*.bat xsp/bin')

# Make all the substitutions
#  bin wrapper files, .pc files
for selection in selections:
	os.chdir(selection.name)

	#########################################
	# Substitute pkgconfig files
	parameter_map = {}
	parameter_map[re.compile('^prefix=.*', re.M)] = "prefix=@@WIN_MONO_INST_DIR@@"
	
	if os.path.exists('lib/pkgconfig'):
		os.chdir('lib/pkgconfig')
		for file in os.listdir('.'):
			utils.substitute_parameters_in_file(file, parameter_map)
		os.chdir('../..')
	#
	#########################################

	#########################################
	# Substitute cyg and win paths in sh files
	parameter_map = {}

	# Stuff built on cygwin
	parameter_map[re.compile('([cC]:\/cygwin)?\/tmp\/install')] = "@@WIN_MONO_INST_DIR@@"
	parameter_map[re.compile('\/tmp\/build_deps')] = "@@WIN_MONO_INST_DIR@@"


	# noarch rpms
	parameter_map[re.compile('(env )?\/usr')] = "@@WIN_MONO_INST_DIR@@"

	# Specifically for monodoc
	parameter_map[re.compile('^prefix=.*', re.M)] = "prefix=@@WIN_MONO_INST_DIR@@"

	# The optional space is from /usr/bin/monodoc being jacked: still works though
	qualifier = re.compile('#! ?\/bin\/sh')

	if os.path.exists('bin'):
		os.chdir('bin')
		for file in os.listdir('.'):
			utils.substitute_parameters_in_file(file, parameter_map, qualifier=qualifier)
		os.chdir('..')

	#
	#########################################




	#########################################
	# .bat files

	if os.path.exists('bin'):
		os.chdir('bin')
		for file in os.listdir('.'):

			if not os.path.isfile(file):
				continue

			fd = open(file, 'r')
			text = fd.read()
			fd.close()

			shell_match = re.compile('#! ?\/bin\/sh')
			mono_match = re.compile(r"mono")


			if shell_match.search(text) and mono_match.search(text):
				bat_file = file + ".bat"

				parameter_map = {}

				# If there's not already a batch file, copy the wrapper.bat
				if not os.path.exists(bat_file):
					print "Creating " + bat_file
					shutil.copy(cwd + "/bat/wrapper.bat", bat_file)

					# Get the path of the binary out of the shell script
					# Match everything after mono then after the / up to .exe
					path_string = re.compile(r"mono{0,1}?.*?\/(.*?).exe{0,1}").search(text).groups()
					# Get the last match
					path_string = path_string[len(path_string) - 1]


					# make it dos friendly
					path_string = re.sub('/', r"\\\\", path_string)
					# Put it back into the batch file
					parameter_map[re.compile('@@MONO_WRAPPER@@')] = path_string


				# There's already a batch file, just substitute 
				#(pretty retarded since GtkDemo.bat is the only .bat, oh well)
				else:
					parameter_map[re.compile(r'([cC]:\\cygwin)?\\tmp\\install')] = "@@WIN_MONO_INST_DIR@@"
					parameter_map[re.compile(r'([cC]:\\cygwin)?\\tmp\\build_deps')] = "@@WIN_MONO_INST_DIR@@"

				utils.substitute_parameters_in_file(bat_file, parameter_map)


		os.chdir('..')


	#
	#########################################

	# Ending chdir for loop
	os.chdir('..')

# Fix dll map config for gtkhtml
# TODO: is this not done in the gtk-sharp build? (.config files aren't shipped on windows, even in this case there needs to be one)
utils.add_dll_map('mono/etc/mono/config', '<dllmap dll="gtkhtml-3.0" target="libgtkhtml-3.8-15.dll"/>')

# Substitute the config file to point to the docs
parameter_map = {}
parameter_map[re.compile(r"/usr")] = r"@@WIN_MONO_INST_DIR@@"
utils.substitute_parameters_in_file("mono/lib/mono/gac/monodoc/1.0.0.0__0738eb9f132ed756/monodoc.dll.config", parameter_map)

#
##############################################


##############################################
# gtk massages (This will need to be updated when a new version of gtk comes)
# TODO

# Substitute some etc files
parameter_map = {}
parameter_map[re.compile(r"(c:)?\/devel\/target\/gtk\+-2.10.3")] = r"@@WIN_MONO_INST_DIR@@"
utils.substitute_parameters_in_file("gtk/etc/gtk-2.0/gdk-pixbuf.loaders", parameter_map)
utils.substitute_parameters_in_file("gtk/etc/gtk-2.0/gtk.immodules", parameter_map)

#
##############################################


##############################################
# Fix up gluezilla (xulrunner deps)

# Remove sdk and buildtools
#shutil.rmtree('mono/xulrunner-sdk')
shutil.rmtree('mono/gecko-sdk')
shutil.rmtree('mono/buildtools')

# Rename mono to mono.exe
shutil.move('mono/bin/mono', 'mono/bin/mono.exe')

#
##############################################

# ikvm massaging
#  Since we unpack ikvm files from the linux rpm, 
#   we package this win32 specific file
#  Move it into the correct dir for win installer
shutil.move("mono/lib/ikvm/ikvm-native.dll", "mono/bin")
shutil.move("mono/lib/ikvm/JVM.DLL", "mono/bin")
#
##############################################

##############################################
# Clean up some unneeded files
print "Cleaning up unnecessary files..."

# remove any Mac OS quarantine files that may have crept in
commands.getoutput("find . -name ._* -delete")

prune_files = """
	README.libiconv
	bin/*gettext*exe
	bin/iconv.exe
	bin/gobject-query*exe
	bin/msg*
	contrib
	manifest
	man/cat3
	share/doc/gettext
	share/emacs
	share/gtk-doc
	share/man/man1
	share/man/man3
	""".split()
commands.getoutput("cd mono; mv bin/msgfmt.exe . ; rm -Rf %s ; mv msgfmt.exe bin" % " ".join(prune_files) )

prune_files = """
	bin/*jpeg*exe
	bin/*jpg*exe
	bin/*png*exe
	bin/*tiff*exe
	bin/*rgb*exe
	bin/fax*exe
	bin/fc*exe
	bin/ft*exe
	bin/*gif*exe
	bin/gif*
	bin/xml*exe
	contrib
	man/cat1
	man/cat3
	man/cat5
	man/man1/fc*
	man/man3
	man/man5
	manifest
	readme.txt
	share/doc
	share/gtk-2.0
	share/gtk-doc
	""".split()
commands.getoutput("cd gtk; rm -Rf %s " % " ".join(prune_files) )

#
##############################################

# Go out of build
os.chdir('..')

# # Run the guid generator on windows
# print "Copying/running guidgen..."
# build_loc = installer_conf.buildenv.build_location
# installer_conf.buildenv.copy_to('guidgen/guidgen.exe', build_loc)
# (code, output) = installer_conf.buildenv.execute_command(build_loc + os.sep + 'guidgen.exe')
# print "\n",
# guid = output.split().pop()

# if guid == "found" or not re.compile('.*-.*-.*-.*-.*').search(guid):
# 	print "Error getting guid: %s" % guid
# 	print "Output : %s" % output
# 	sys.exit(1)

guid = str(uuid.uuid1())

# Massage .iss file
#  Mono.iss file (version, AppId, etc...)
shutil.copy("Mono_template.iss", "Mono.iss")
parameter_map = {}
parameter_map[re.compile("@@MONO_VERSION@@")] = sys.argv[1]
parameter_map[re.compile("@@GTK_SHARP_VERSION@@")] = gtk_sharp_version
parameter_map[re.compile("@@MONO_REVISION@@")] = sys.argv[2]
parameter_map[re.compile("@@MONO_GUID@@")] = guid
parameter_map[re.compile("@@DATE@@")] = datetime.date.today().strftime('%b %d, %Y')
utils.substitute_parameters_in_file("Mono.iss", parameter_map)
utils.substitute_parameters_in_file('build/mono/ReleaseNotes.txt', parameter_map)

# Massage setmonopath.bat
parameter_map = {}
parameter_map[re.compile("@@MONO_VERSION@@")] = sys.argv[1]
parameter_map[re.compile("@@MONO_REVISION@@")] = sys.argv[2]
utils.substitute_parameters_in_file("build/mono/bin/setmonopath.bat", parameter_map)

# Copy everything to windows_build_client 
print "Cleaning up files from build client..."
(code, output) = installer_conf.buildenv.execute_command("rm -Rf /tmp/windows-installer; mkdir -p /tmp/windows-installer/Output")
if code:
	print "Error cleaning up"
	print output
	sys.exit(code)

print "Copying files to build client..."
installer_conf.buildenv.copy_to(["build", "Mono.iss", "setup-files"], '/tmp/windows-installer', compress=1, mode='ssh')

# Strip binaries for each selection
#  TODO: Hmm... this broke the install (mono wouldn't run at runtime) ... will need more investigation
#  Fixed for now, stripping some of the .dll files causes problems, so we'll only strip the biggest ones
for sel in selections:
	(code, output) = installer_conf.buildenv.execute_command('cd /tmp/windows-installer/build/%s/bin; strip --strip-unneeded *.exe mono*.dll libgtk-win*.dll ; cd ../lib; strip --strip-unneeded *.a' % sel.name)

# Run installer on windows
(code, output) = installer_conf.buildenv.execute_code('export PATH="$PATH:/cygdrive/c/PROGRA~1/INNOSE~1:C:\Program Files\Inno Setup5"; cd /tmp/windows-installer; ISCC.exe Mono.iss')

if code:
	print "Error running installer"
	sys.exit(1)

print "Keep record of what files went into the installer"
distutils.dir_util.mkpath(output_dir)
packages_file = open('%s/packages_used.txt' % output_dir, 'w')
files_used_in_installer.sort()
packages_file.write(string.join(files_used_in_installer, "\n"))
packages_file.write("\n")
packages_file.close()

print "Copy resultant file back"
installer_conf.buildenv.copy_from("/tmp/windows-installer/Output/*", output_dir)

# Generate the md5sum of the final installer
# output_filename = os.path.basename(glob.glob(output_dir + os.sep + "*.exe").pop())
# commands.getoutput("cd %s; md5sum *.exe > %s.md5 " % (output_dir, output_filename))

