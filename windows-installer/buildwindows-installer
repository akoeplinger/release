#!/usr/bin/env /usr/bin/python

# Collect list of files/rpms for each install group:
#  Mono (glib)
#  Gtk
#  # gtk#1/2
#  ##monodoc (now monodoc and mono-tools)
#  ##gecko# (1 and 2)
#  ##Samples
#  XSP


# Samples contain: sql-sharp and prj2makegtk and source code samples
# http://primates.ximian.com/~wberrier/windows-installer/samples.zip
#

# Monolaunch: http://forge.novell.com/modules/xfcontent/private.php/monowin32/Runtime%20selector/MonoLaunch-1.0.1.0-1.exe
#   Paco Martinez
#  http://primates.ximian.com/~wberrier/windows-installer/monolaunch/monolaunch-1.0.1.0-1.zip

# Can't seem to install this one, will use what's in the samples for now
#   prj2makegtk#
# http://forge.novell.com/modules/xfcontent/private.php/prj2make-sharp/Windows/v0.99.0.1/vsprj2make-setup-0.99.0.1.exe


# sqlsharpgtk: http://forge.novell.com/modules/xfcontent/private.php/sqlsharpgtk/sqlsharpgtk-0.3-bin.tar.gz
#  Dan Morgan
#   This will need some massaging after it's downloaded


# Need to do the same thing the linux installer does: look in lib/mono/1.0/*.exe and make sure there are wrappers 
# After all shell wrappers are created, create an equivalent .bat wrapper

import sys
import os
import shutil
import os.path
import tempfile
import commands
import pdb
import string
import glob
import distutils.dir_util
import re

# Global constant type vars
cwd = os.getcwd()
windows_build_client = 'builder@monowin.dnsdhcp.provo.novell.com'
packaging_dir = cwd + "/../packaging"
rpmvercmp = cwd + "/../rpmvercmp/rpmvercmp"
external_downloads = cwd + os.sep +"external_downloads"

# Get vars out of shell scripts (def files)
def get_env_var(var_name, source):

	tmp_script = tempfile.mktemp()

	my_script = open(tmp_script, 'w')
	my_script.write(". %s\n" % source)
	my_script.write("echo ${%s[@]}\n" % var_name)
	my_script.close()

	output = commands.getoutput("sh %s" % tmp_script)

	os.unlink(tmp_script)

	return output

# Extract either tarball, rpm, or zip
def extract_file(filename):
	print "Extracting: %s" % filename
	(root, ext) = os.path.splitext(filename)

	files_used_in_installer[(os.path.basename(filename))] = ""

	if ext ==  ".zip" or ext == ".exe":
		#print "Found zip!"
		(status, output) = commands.getstatusoutput("unzip -o %s" % filename)
		#print output
		#print "Status: %d" % status
		if status:
			print "Error unzipping file! %s" % filename
			print "File is probably corrupt, removing"
			os.remove(filename)
			sys.exit(1)

	elif ext == ".rpm":
		#print "Found rpm!"
		tempdir = "___EXTRACT___"

		if os.path.exists(tempdir):
			shutil.rmtree(tempdir)
		os.mkdir(tempdir)
		os.chdir(tempdir)

		(status, output) = commands.getstatusoutput("rpm2cpio %s | cpio -idv" % filename)
		#print output
		#print "Status: %d" % status
		if status:
			print "Error extracting rpm file!" % filename
			sys.exit(1)

		os.chdir("usr")
		(status, output) = commands.getstatusoutput("cp -Rf * ../..")
		if status:
			print "Error massaging files from rpm!" % filename
			sys.exit(1)

		os.chdir("../..")
		shutil.rmtree(tempdir)


	elif ext == ".gz" or ext == ".bz2":
		if ext == ".gz": flag = "z"
		if ext == ".bz2": flag = "j"

		#print "Found tarball!"
		(status, output) = commands.getstatusoutput("tar -%sxvpf %s" % (flag, filename))
		#print output
		#print "Status: %d" % status
		if status:
			print "Error untarring file!" % filename
			sys.exit(1)



# Download url into cache
def get_url(url,filename):

	# Download if not in cache
	if not os.path.exists(external_downloads + os.sep + filename):
		print "Downloading: %s ..." % url
		command = "wget -c %s -O %s" % (url, external_downloads + os.sep + filename)
		#print command
		(status, output) = commands.getstatusoutput(command)


def substitute_parameters_in_file(file, qualifier, parameter_map):

	fd = open(file, 'r')
	text = fd.read()
	fd.close()

	if qualifier.match(text):
		print "Substituting: " + file
		text = substitute_parameters(text, parameter_map)

	fd = open(file, 'w')
	fd.write(text)
	fd.close()


# First arg: text
# Second arg, hash of key value pairs to swap in the text
# Note: keys can be regexs
def substitute_parameters(text, parameter_map):

	for regex in parameter_map.keys():
		# In the text, substitute the key with the value from the hash
		text = re.sub(regex, parameter_map[regex], text)

	return text

def add_dll_map(file, new_dll_line):

	fd = open(file, 'r')
	closing_config_match = re.compile('</configuration>')
	text = ""
	
	for line in fd.readlines():
		if closing_config_match.search(line):
			text = text + '\t' + new_dll_line + '\n'

		text = text + line
	fd.close()

	# Save changes back out
	fd = open(file, 'w')
	fd.write(text)
	fd.close()


# Might need this later
def remove_dll_map(file, text_to_remove):

	fd = open(file, 'r')
	new_text = ""
	
	for line in fd.readlines():
		if not line.count(text_to_remove):
			new_text = new_text + line
	fd.close()

	# Save changes back out
	fd = open(file, 'w')
	fd.write(new_text)
	fd.close()


# Represents a selection in the installer
class Selection:
	def __init__(self, name):
		self.name = name
		self.packages = []



# Definitions: base: base path to find directory of version for the packages
#              package: flag: include the package we build
#              deps: flag: include the deps that are required to build

class Package:
	def __init__(self, base="", package=0, deps=0, url=0):
		self.base = os.path.abspath(packaging_dir + os.sep + base)
		self.package = package
		self.deps = deps
		self.url = url

		# Get path to latest set of packages
		if not url:
			self.latest_path = self.base + os.sep + self.get_latest_ver()
		else:
			self.latest_path = ""

	def get_latest_ver(self):
		files = os.listdir(self.base)

		output = commands.getoutput(rpmvercmp + " " + string.join(files))

		# Get last line of output
		latest_version = output.split().pop()

		return latest_version

	def extract_files(self):

		if self.url:
		
			# Get filename
			filename = os.path.basename(self.url)
			#print filename

			get_url(self.url, filename)

			extract_file(external_downloads + os.sep + filename)


		if self.package:
			#print "Base: " + self.latest_path	
			package_files = os.listdir(self.latest_path)

			for file in package_files:
				extract_file(self.latest_path + os.sep + file)


		if self.deps:
			# Get def name
			def_file = os.path.basename(self.base)
			deps = get_env_var("win_4_i386_ZIP_DEPS", packaging_dir + os.sep + "defs" + os.sep + def_file)
			deps = deps.split()

			for url in deps:
				# Get filename, download, and extract
				filename = os.path.basename(url)
				get_url(url, filename)
				extract_file(external_downloads + os.sep + filename)


### Main Execution Starts Here ###

if len(sys.argv) < 3:
	print "Usage: buildwindows-installer <mono version> <gtk-sharp version> [<revision>]"
	print "Example: buildwindows-installer 1.1.9.1 2.3.91 0"
	sys.exit(1)

# Default to 0 revision
if len(sys.argv) == 3:
	sys.argv.append('0')

output_dir = 'Output/%s/windows-installer/%s' % ( sys.argv[1], sys.argv[3]) 

if os.path.exists(output_dir):
	print "Build already exists: %s (you probably need to bump the revision)" % output_dir
	sys.exit(1)

# Initialize Selection objects each containing an array of Package objects
files_used_in_installer = {}
selections = []

selection = Selection('mono')
selection.packages.append(Package(
			base	=	'zip_packages/win-4-i386/mono-1.1',
			package	=	1,
			deps	=	1)
			)
selection.packages.append(Package(
			url	=	'http://primates.ximian.com/~wberrier/windows-installer/ms_gdiplus/3102.1360/gdiplus.exe')
			)
selection.packages.append(Package(
			base	=	'packages/noarch/boo',
			package	=	1,
			deps	=	1)
			)
selection.packages.append(Package(
			base	=	'packages/noarch/ikvm',
			package	=	1,
			deps	=	1)
			)
selections.append(selection)

selection = Selection('gtk')
selection.packages.append(Package(
			base	=	'zip_packages/win-4-i386/gtk-sharp',
			package	=	0,
			deps	=	1)
			)
selection.packages.append(Package(
			base	=	'zip_packages/win-4-i386/gtk-sharp-2.0',
			package	=	0,
			deps	=	1)
			)
selection.packages.append(Package(
			url	=	'http://easynews.dl.sourceforge.net/sourceforge/gnuwin32/jpeg-6b-4-bin.zip')
			)
selection.packages.append(Package(
			url	=	'http://easynews.dl.sourceforge.net/sourceforge/gnuwin32/jpeg-6b-4-dep.zip')
			)
selection.packages.append(Package(
			url	=	'http://easynews.dl.sourceforge.net/sourceforge/gnuwin32/libpng-1.2.8-dep.zip')
			)
selection.packages.append(Package(
			url	=	'http://easynews.dl.sourceforge.net/sourceforge/gnuwin32/libpng-1.2.8-bin.zip')
			)
selection.packages.append(Package(
			url	=	'http://easynews.dl.sourceforge.net/sourceforge/gnuwin32/tiff-3.7.3-dep.zip')
			)
selection.packages.append(Package(
			url	=	'http://easynews.dl.sourceforge.net/sourceforge/gnuwin32/tiff-3.7.3-bin.zip')
			)
selection.packages.append(Package(
			url	=	'http://easynews.dl.sourceforge.net/sourceforge/gnuwin32/freetype-2.1.10-bin.zip')
			)
selection.packages.append(Package(
			url	=	'http://easynews.dl.sourceforge.net/sourceforge/gnuwin32/freetype-2.1.10-dep.zip')
			)
selection.packages.append(Package(
			url	=	'http://easynews.dl.sourceforge.net/sourceforge/gladewin32/glade-2.6.0-rc1.zip')
			)
selection.packages.append(Package(
			url	=	'http://easynews.dl.sourceforge.net/sourceforge/gladewin32/gts-0.1.1.zip')
			)
selection.packages.append(Package(
			url	=	'http://easynews.dl.sourceforge.net/sourceforge/gtk-wimp/gtk-wimp-0.7.0-bin.zip')
			)
selections.append(selection)

selection = Selection('gtk-sharp')
selection.packages.append(Package(
			base	=	'zip_packages/win-4-i386/gtk-sharp',
			package	=	1,
			deps	=	0)
			)
selection.packages.append(Package(
			base	=	'zip_packages/win-4-i386/gtk-sharp-2.0',
			package	=	1,
			deps	=	0)
			)
selections.append(selection)

selection = Selection('monodoc')
selection.packages.append(Package(
			base	=	'packages/noarch/monodoc',
			package	=	1,
			deps	=	0)
			)
"""
# Not working right now... (probably have to build this on windows in order to compile with gecko instead of gtkhtml)
selection.packages.append(Package(
			base	=	'packages/noarch/mono-tools',
			package	=	1,
			deps	=	0)
			)
"""
selections.append(selection)


selection = Selection('gecko-sharp')
selection.packages.append(Package(
			base	=	'packages/noarch/gecko-sharp',
			package	=	1,
			deps	=	0)
			)
selection.packages.append(Package(
			base	=	'packages/noarch/gecko-sharp-2.0',
			package	=	1,
			deps	=	0)
			)
selections.append(selection)


selection = Selection('samples')
selection.packages.append(Package(
			#url	=	'http://forge.novell.com/modules/xfcontent/private.php/sqlsharpgtk/sqlsharpgtk-0.3-bin.tar.gz')
			#  This updated url has sqlsharp compiled for the new gtk#
			url	=	'http://primates.ximian.com/~wberrier/windows-installer/sqlsharpgtk-0.3-0-bin.tar.gz')
			)
selection.packages.append(Package(
			url	=	'http://primates.ximian.com/~wberrier/windows-installer/samples.zip')
			)
selections.append(selection)


selection = Selection('xsp')
selection.packages.append(Package(
			base	=	'packages/noarch/xsp',
			package	=	1,
			deps	=	0)
			)
selections.append(selection)



# Clean up work area
if os.path.exists('build'):
	shutil.rmtree('build')
os.mkdir('build')
os.chdir('build')


# Start gathering, laying down, and extracting 
for selection in selections:

	os.mkdir(selection.name)
	os.chdir(selection.name)

	for package in selection.packages:
		package.extract_files()

	os.chdir("..")

##########################################
# Special case for sqlsharpgtk, massage it
os.chdir('samples')
dir = glob.glob('sqlsharpgtk*').pop()
print dir
distutils.dir_util.mkpath('share/doc' + os.sep + dir)
os.chdir(dir)

output = commands.getoutput("cp -f *.TXT ../share/doc/%s" % dir)
output = commands.getoutput("mv sqlsharpgtk ../bin")
output = commands.getoutput("cp -f sqlsharpgtk.* ../lib")
output = commands.getoutput("cp -f Mono.Data.SqlSharp.DatabaseBrowser.* ../lib")

os.chdir("..")
shutil.rmtree(dir)
os.chdir("..")
# End of sqlsharpgtk special case
#########################################

##########################################
# Special case for glade
os.chdir('gtk/glade')
output = commands.getoutput("cp -Rfp * ..")
os.chdir('..')
shutil.rmtree('glade')

os.chdir("..")

#
#########################################

##########################################
# Special case for gtk-wimp theme

os.chdir('gtk')

if not os.path.exists('lib/gtk-2.0/2.4.0'):
	print "Error munging gtk-wimp: Path doesn't exist: lib/gtk-2.0/2.4.0"
	sys.exit(1)

os.makedirs('lib/gtk-2.0/2.4.0/engines')
shutil.move('gtk-wimp-0.7.0-bin/libwimp.dll', 'lib/gtk-2.0/2.4.0/engines')

os.makedirs('share/themes/gtk-wimp/gtk-2.0')
shutil.move('gtk-wimp-0.7.0-bin/Theme/gtk-2.0/gtkrc', 'share/themes/gtk-wimp/gtk-2.0')

# Do some theme renaming (Looks like something similar is proposed for upstream)
# Rename default to Raleigh
shutil.move('share/themes/Default', 'share/themes/Raleigh')

# Make the wimp theme the default
shutil.move('share/themes/gtk-wimp', 'share/themes/Default')

# Another way to make the wimp theme the default
#shutil.copy('share/themes/gtk-wimp/gtk-2.0/gtkrc', 'etc/gtk-2.0')

shutil.rmtree('gtk-wimp-0.7.0-bin')

os.chdir("..")

#
#########################################


##########################################
# Special case for ms' gdiplus
os.chdir('mono')

os.mkdir('share/doc/gdiplus')
shutil.move('redist.txt', 'share/doc/gdiplus')
shutil.move('license.txt', 'share/doc/gdiplus')

#shutil.move('gdiplus.dll', 'bin')
# Need to move it back so it doesn't get grabbed with the mono\* selection
shutil.move('gdiplus.dll', '..')

os.chdir("..")

#
#########################################


##########################################
# Special case for etc/mono/config

os.chdir('mono')

# Add rsvg map
add_dll_map('etc/mono/config', '<dllmap dll="rsvg-2" target="librsvg-2-2.dll"/>')

# Remove other maps that aren't necessary on win32 (this should be done with the autotools so that people
#  who run from source will get the changes)
remove_dll_map('etc/mono/config', '<dllmap dll="MonoPosixHelper" target="libMonoPosixHelper.so"/>')
remove_dll_map('etc/mono/config', '<dllmap dll="libmySQL.dll" target="libmysqlclient.so" />')
remove_dll_map('etc/mono/config', '<dllmap dll="odbc32.dll" target="libodbc.so" />')
remove_dll_map('etc/mono/config', '<dllmap dll="oci" target="clntsh" />')
remove_dll_map('etc/mono/config', '<dllmap dll="db2cli" target="libdb2_36.so"/>')
remove_dll_map('etc/mono/config', '<dllmap dll="msvcrt" target="libc.so.6"/>')
remove_dll_map('etc/mono/config', '<dllmap dll="libX11" target="libX11.so"/>')
remove_dll_map('etc/mono/config', '<dllmap dll="libcairo-2.dll" target="libcairo.so.2"/>')

os.chdir("..")

#
#########################################





# Add random files for shortcuts
shutil.copy('../bat/setmonopath.bat', 'mono/bin')
shutil.copy('../setup-files/mono.ico', 'mono')
shutil.copy('../setup-files/ReleaseNotes.txt', 'mono')
commands.getoutput('cp -f ../bat/startXSP*.bat xsp/bin')

# Make all the substitutions
#  bin wrapper files, .pc files
for selection in selections:
	os.chdir(selection.name)

	#########################################
	# Substitute pkgconfig files
	parameter_map = {}
	parameter_map[re.compile('^prefix=.*', re.M)] = "prefix=@@WIN_MONO_INST_DIR@@"
	qualifier = re.compile('')  # No qualifier
	
	if os.path.exists('lib/pkgconfig'):
		os.chdir('lib/pkgconfig')
		for file in os.listdir('.'):
			substitute_parameters_in_file(file, qualifier, parameter_map)
		os.chdir('../..')
	#
	#########################################

	#########################################
	# Substitute cyg and win paths in sh files
	parameter_map = {}

	# Stuff built on cygwin
	parameter_map[re.compile('([cC]:\/cygwin)?\/tmp\/install')] = "@@WIN_MONO_INST_DIR@@"
	parameter_map[re.compile('\/tmp\/build_deps')] = "@@WIN_MONO_INST_DIR@@"


	# noarch rpms
	parameter_map[re.compile('(env )?\/usr')] = "@@WIN_MONO_INST_DIR@@"

	# Specifically for monodoc
	parameter_map[re.compile('^prefix=.*', re.M)] = "prefix=@@WIN_MONO_INST_DIR@@"

	# The optional space is from /usr/bin/monodoc being jacked: still works though
	qualifier = re.compile('#! ?\/bin\/sh')

	if os.path.exists('bin'):
		os.chdir('bin')
		for file in os.listdir('.'):
			substitute_parameters_in_file(file, qualifier, parameter_map)
		os.chdir('..')

	#
	#########################################




	#########################################
	# .bat files

	if os.path.exists('bin'):
		os.chdir('bin')
		for file in os.listdir('.'):

			fd = open(file, 'r')
			text = fd.read()
			fd.close()

			shell_match = re.compile('#! ?\/bin\/sh')
			mono_match = re.compile(r"mono")
			empty_match = re.compile('')


			if shell_match.search(text) and mono_match.search(text):
				bat_file = file + ".bat"

				parameter_map = {}

				# If there's not already a batch file, copy the wrapper.bat
				if not os.path.exists(bat_file):
					print "Creating " + bat_file
					shutil.copy(cwd + "/bat/wrapper.bat", bat_file)

					# Get the path of the binary out of the shell script
					# Match everything afeter mono then after the / up to .exe
					path_string = re.compile(r"mono{0,1}?.*?\/(.*?).exe{0,1}").search(text).groups()
					# Get the last match
					path_string = path_string[len(path_string) - 1]


					# make it dos friendly
					path_string = re.sub('/', r"\\\\", path_string)
					# Put it back into the batch file
					parameter_map[re.compile('@@MONO_WRAPPER@@')] = path_string


				# There's already a batch file, just substitute 
				#(pretty retarded since GtkDemo.bat is the only .bat, oh well)
				else:
					parameter_map[re.compile(r'([cC]:\\cygwin)?\\tmp\\install')] = "@@WIN_MONO_INST_DIR@@"
					parameter_map[re.compile(r'([cC]:\\cygwin)?\\tmp\\build_deps')] = "@@WIN_MONO_INST_DIR@@"

				substitute_parameters_in_file(bat_file, empty_match, parameter_map)


		os.chdir('..')


	#
	#########################################

	# Ending chdir for loop
	os.chdir('..')

# In build dir

##############################################
# gtk-sharp hacks

# Fix/remove some uneccessary wrappers (will become necessary once gtk-sharp2 is built with mono and mcs)
# gapi-codegen (copy gapi_codegen.exe to gapi-codegen.exe and delete wrapper)
shutil.copy("gtk-sharp/bin/gapi_codegen.exe", "gtk-sharp/bin/gapi-codegen.exe")
os.remove("gtk-sharp/bin/gapi-codegen")
os.remove("gtk-sharp/bin/gapi-codegen.bat")

#gapi-fixup (just delete the wrappers)
os.remove("gtk-sharp/bin/gapi-fixup")
os.remove("gtk-sharp/bin/gapi-fixup.bat")

#gconfsharp-schemagen (delete the wrappers)
os.remove("gtk-sharp/bin/gconfsharp-schemagen")
os.remove("gtk-sharp/bin/gconfsharp-schemagen.bat")


# These are native binaries but are in the lib/gtk-sharp-2.0 dir (copy and rename!, and delete wrapper)
# TODO: Should this happen in the gtk-sharp build?
# This will change once gtk-sharp2 is built with mcs/mono instead of the ms sdk
#gapi2-codegen
shutil.copy("gtk-sharp/lib/gtk-sharp-2.0/gapi_codegen.exe", "gtk-sharp/bin/gapi2-codegen.exe")
os.remove("gtk-sharp/bin/gapi2-codegen")

#gapi2-fixup
shutil.copy("gtk-sharp/lib/gtk-sharp-2.0/gapi-fixup.exe", "gtk-sharp/bin/gapi2-fixup.exe")
os.remove("gtk-sharp/bin/gapi2-fixup")

#gapi2-parser
shutil.copy("gtk-sharp/lib/gtk-sharp-2.0/gapi-parser.exe", "gtk-sharp/bin/gapi2-parser.exe")
os.remove("gtk-sharp/bin/gapi2-parser")

#gconfsharp2-schemagen
shutil.copy("gtk-sharp/lib/gtk-sharp-2.0/gconfsharp-schemagen.exe", "gtk-sharp/bin/gconfsharp2-schemagen.exe")
os.remove("gtk-sharp/bin/gconfsharp2-schemagen")

#
##############################################

##############################################
# monodoc .bat wrapper hacks

parameter_map = {}
parameter_map[re.compile(r"\\assembler")] = r"\\lib\\monodoc\\assembler"
substitute_parameters_in_file("monodoc/bin/mdassembler.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\cs2ecma")] = r"\\lib\\monodoc\\cs2ecma"
substitute_parameters_in_file("monodoc/bin/mdcs2ecma.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\normalize")] = r"\\lib\\monodoc\\normalize"
substitute_parameters_in_file("monodoc/bin/mdnormalizer.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\validate")] = r"\\lib\\monodoc\\validate"
substitute_parameters_in_file("monodoc/bin/mdvalidater.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\mod")] = r"\\lib\\monodoc\\mod"
substitute_parameters_in_file("monodoc/bin/mod.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\monodocer")] = r"\\lib\\monodoc\\monodocer"
substitute_parameters_in_file("monodoc/bin/monodocer.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\monodocs2html")] = r"\\lib\\monodoc\\monodocs2html"
substitute_parameters_in_file("monodoc/bin/monodocs2html.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\monodocs2slashdoc")] = r"\\lib\\monodoc\\monodocs2slashdoc"
substitute_parameters_in_file("monodoc/bin/monodocs2slashdoc.bat", re.compile(''), parameter_map)


# This is from mono-tools:
#substitute_parameters_in_file("monodoc/bin/monodoc.bat", re.compile(''), parameter_map)

# From mono-tools
#parameter_map = {}
#parameter_map[re.compile(r"monodoc.exe")] = r"browser.exe"
#substitute_parameters_in_file("monodoc/bin/monodoc.bat", re.compile(''), parameter_map)


# Substitute the config file to point to the docs
parameter_map = {}
parameter_map[re.compile(r"/usr")] = r"@@WIN_MONO_INST_DIR@@"
substitute_parameters_in_file("monodoc/lib/mono/gac/monodoc/1.0.0.0__0738eb9f132ed756/monodoc.dll.config", re.compile(''), parameter_map)


#
##############################################


##############################################
# gtk massages (This will need to be updated when a new version of gtk comes)

# Substitute some etc files
parameter_map = {}
parameter_map[re.compile(r"(c:)?\/devel\/target\/gtk\+-2.6.9")] = r"@@WIN_MONO_INST_DIR@@"
substitute_parameters_in_file("gtk/etc/gtk-2.0/gdk-pixbuf.loaders", re.compile(''), parameter_map)
substitute_parameters_in_file("gtk/etc/gtk-2.0/gtk.immodules", re.compile(''), parameter_map)

# Now for pango
parameter_map = {}
parameter_map[re.compile(r"c:/devel/target/pango-1.8.2")] = r"@@WIN_MONO_INST_DIR@@"
substitute_parameters_in_file("gtk/etc/pango/pango.modules", re.compile(''), parameter_map)

#
##############################################


# Go out of build
os.chdir('..')

# Run the guid generator on windows
# TODO:  Need to be able to interact (just in case keys aren't set up) and also capture output
os.system("scp guidgen/guid_generator.exe %s:" % windows_build_client)
# It would be nice to have a win32 console app to spit this out and not be dependent on mono
guid = commands.getoutput("ssh %s '. /tmp/build_deps/env.sh; mono ./guid_generator.exe' " % windows_build_client).split().pop()

if guid == "found" or not re.compile('.*-.*-.*-.*-.*').search(guid):
	print "Error getting guid: %s" % guid
	sys.exit(1)

# Massage .iss file
#  Mono.iss file (version, AppId, etc...)
shutil.copy("Mono_template.iss", "Mono.iss")
parameter_map = {}
parameter_map[re.compile("@@MONO_VERSION@@")] = sys.argv[1]
parameter_map[re.compile("@@GTK_SHARP_VERSION@@")] = sys.argv[2]
parameter_map[re.compile("@@MONO_REVISION@@")] = sys.argv[3]
parameter_map[re.compile("@@MONO_GUID@@")] = guid
substitute_parameters_in_file("Mono.iss", re.compile(''), parameter_map)

# Massage setmonopath.bat
parameter_map = {}
parameter_map[re.compile("@@MONO_VERSION@@")] = sys.argv[1]
parameter_map[re.compile("@@MONO_REVISION@@")] = sys.argv[3]
substitute_parameters_in_file("build/mono/bin/setmonopath.bat", re.compile(''), parameter_map)

# Keep record of what files went into the installer
distutils.dir_util.mkpath(output_dir)
packages_file = open('%s/packages_used.txt' % output_dir, 'w')
packages_file.write(string.join(files_used_in_installer.keys(), "\n"))
packages_file.write("\n")
packages_file.close()

# Copy everything to windows_build_client 
print "Cleaning up files files from build client..."
os.system("ssh %s 'rm -Rf /tmp/windows-installer; mkdir -p /tmp/windows-installer/Output'" % windows_build_client)
print "Copying files to build client..."
os.system("tar -zpcf - build Mono.iss setup-files  | ssh %s 'cd /tmp/windows-installer; tar -zpxf -'" % windows_build_client)

# Run installer on windows
if os.system("""ssh %s 'export PATH="$PATH:/cygdrive/c/PROGRA~1/INNOSE~1:C:\Program Files\Inno Setup5"; cd /tmp/windows-installer; ISCC.exe Mono.iss' """ % windows_build_client):
	print "Error running installer"
	sys.exit(1)

# Copy resultant file back
os.system("mkdir -p Output; scp %s:/tmp/windows-installer/Output/* %s" % (windows_build_client, output_dir))

# Generate the md5sum of the final installer
output_filename = os.path.basename(glob.glob(output_dir + os.sep + "*.exe").pop())
os.system("cd %s; md5sum *.exe > %s.md5 " % (output_dir, output_filename))


