#!/usr/bin/env python

# Collect list of files/rpms for each install group:
#  Mono (glib)
#  Gtk
#  # gtk#1/2
#  ##monodoc (now monodoc and mono-tools)
#  ##gecko# (1 and 2)
#  ##Samples
#  XSP


# Samples contain: sql-sharp and prj2makegtk and source code samples
# http://primates.ximian.com/~wberrier/windows-installer/samples.zip
#

# Monolaunch: http://forge.novell.com/modules/xfcontent/private.php/monowin32/Runtime%20selector/MonoLaunch-1.0.1.0-1.exe
#   Paco Martinez
#  http://primates.ximian.com/~wberrier/windows-installer/monolaunch/monolaunch-1.0.1.0-1.zip

# Can't seem to install this one, will use what's in the samples for now
#   prj2makegtk#
# http://forge.novell.com/modules/xfcontent/private.php/prj2make-sharp/Windows/v0.99.0.1/vsprj2make-setup-0.99.0.1.exe


# sqlsharpgtk: http://forge.novell.com/modules/xfcontent/private.php/sqlsharpgtk/sqlsharpgtk-0.3-bin.tar.gz
#  Dan Morgan
#   This will need some massaging after it's downloaded


# Need to do the same thing the linux installer does: look in lib/mono/1.0/*.exe and make sure there are wrappers 
# After all shell wrappers are created, create an equivalent .bat wrapper


import sys
import os
import shutil
import os.path
import commands
import pdb
import string
import glob
import distutils.dir_util
import re
import datetime

# Local common utils
sys.path += [ "../pyutils" ]
import config
import packaging
import utils

# Global constant type vars
cwd = os.getcwd()

installer_env = packaging.buildenv('win-4-i386')

# Represents a selection in the installer
class Selection:
	def __init__(self, name, deps=None, packages=None, urls=None):
		self.name = name

		self.packages = packages
		self.deps = deps
		self.urls = urls

		# This is the only way to pass separate default values for mutable objects
		if deps ==     None: self.deps = []
		if packages == None: self.packages = []
		if urls ==     None: self.urls = []

		# Load some package objects
		self.pack_objs = {}
		for pack in utils.remove_list_duplicates(self.deps + self.packages):
			self.pack_objs[pack] = packaging.package(installer_env,pack)

		self.files = self.get_filelist()

	def get_filelist(self):
		# Only compute once
		try:
			return self.files
		except AttributeError:
			self.files = []
			
			for package in self.packages:
				self.files += self.pack_objs[package].get_latest_files()

			for dep in self.deps:
				self.urls += self.pack_objs[dep].get_distro_zip_deps() + self.pack_objs[dep].get_distro_zip_runtime_deps()

			for url in self.urls:
				filename = os.path.basename(url)
				url_dest = config.packaging_dir + os.sep + 'external_zip_pkg'
				url_dest_file = url_dest + os.sep + filename
				if not os.path.exists(url_dest_file):
					utils.get_url(url, url_dest)
				self.files += [ url_dest_file ]

			self.files = utils.remove_list_duplicates(self.files)

		return self.files
		



### Main Execution Starts Here ###

if len(sys.argv) < 3:
	print "Usage: buildwindows-installer <mono version> <gtk-sharp version> [<revision>]"
	print "Example: buildwindows-installer 1.1.9.1 2.3.91 0"
	sys.exit(1)

# Default to 0 revision
if len(sys.argv) == 3:
	sys.argv.append('0')

output_dir = 'Output/%s/windows-installer/%s' % ( sys.argv[1], sys.argv[3]) 

if os.path.exists(output_dir):
	print "Build already exists: %s (you probably need to bump the revision)" % output_dir
	sys.exit(1)

# Initialize Selection objects each containing an array of Package objects
files_used_in_installer = []
selections = []

selections += [ Selection('mono', packages = "mono boo ikvm".split(), deps=['mono'] ) ]

# TODO: try out gtk-sharp-2.8
#  Everything works except monodoc browser... fails on glade-sharp glade 2.5 seems to be killing this
#  Need to use the same glade in compiling gtk-sharp 1.0 and gtk-sharp 2.8
# glade-sharp does link against the native libglade library... hmm... try rebuilding 1.0 and 2.8 against the 2.5?  I thought they were...
#selections += [ Selection('gtk', deps = "gtk-sharp gtk-sharp-2.0".split() ) ]
selections += [ Selection('gtk', deps = "gtk-sharp gtk-sharp-2.8".split() ) ]

#selections += [ Selection('gtk-sharp', packages = "gtk-sharp gtk-sharp-2.0".split() ) ]
selections += [ Selection('gtk-sharp', packages = "gtk-sharp gtk-sharp-2.8".split() ) ]

selections += [ Selection('monodoc', packages = "monodoc mono-tools".split() ) ]

# TODO: Why am I distributing gecko-sharp without the GRE?
# TODO: Also, why am I distributing gnome?.... ? adds some to gtk-sharp 1.0.10
#   monodoc browser needs gconf-sharp, which depends on gnome-sharp...
#  So, until the GRE for gecko-sharp gets easier to distribute, including gnome is how it is
selections += [ Selection('gecko-sharp', packages = "gecko-sharp gecko-sharp-2.0".split() ) ]

# Hmm... needs to be a better way to package up these samples...
selections += [ Selection('samples', urls = """
http://primates.ximian.com/~wberrier/windows-installer/sqlsharpgtk-0.3-appguidelines.zip
http://primates.ximian.com/~wberrier/windows-installer/samples-1.zip
""".split()
 ) ]
#http://primates.ximian.com/~wberrier/windows-installer/sqlsharpgtk-0.3-0-bin.tar.gz 

selections += [ Selection('xsp', packages = "xsp".split() ) ]



# Clean up work area
if os.path.exists('build'):
	shutil.rmtree('build')
os.mkdir('build')
os.chdir('build')


# Start gathering, laying down, and extracting 
for selection in selections:
	print "Selection: " + selection.name

	files = selection.files
	files_used_in_installer += map(os.path.basename, files)

	os.mkdir(selection.name)
	os.chdir(selection.name)
	
	for file in files:
		utils.extract_file(file, preserve_symlinks=0)

	os.chdir("..")

# uniqify the files array
files_used_in_installer = utils.remove_list_duplicates(files_used_in_installer)

# Not needed anymore... (had to rebuild for some reason...)
###########################################
## Special case for sqlsharpgtk, massage it
#os.chdir('samples')
#dir = glob.glob('sqlsharpgtk*').pop()
#print dir
#distutils.dir_util.mkpath('share/doc' + os.sep + dir)
#os.chdir(dir)
#
#output = commands.getoutput("cp -f *.TXT ../share/doc/%s" % dir)
#output = commands.getoutput("mv sqlsharpgtk ../bin")
#output = commands.getoutput("cp -f sqlsharpgtk.* ../lib")
#output = commands.getoutput("cp -f Mono.Data.SqlSharp.DatabaseBrowser.* ../lib")
#
#os.chdir("..")
#shutil.rmtree(dir)
#os.chdir("..")
## End of sqlsharpgtk special case
##########################################

##########################################
# Special case for gtk-sharp samples
os.chdir('samples')

# Move them from the gtk-sharp-2.8 package
distutils.dir_util.copy_tree("../gtk-sharp/samples", "samples")
distutils.dir_util.remove_tree("../gtk-sharp/samples")

distutils.dir_util.mkpath('bin')

fd = open('bin/GtkDemo', 'w')
fd.write("""#!/bin/sh
exec @@WIN_MONO_INST_DIR@@/bin/mono @@WIN_MONO_INST_DIR@@/samples/gtk-sharp-2.0/GtkDemo/GtkDemo.exe "$@" """)
fd.close()

os.chdir("..")
# End of gtk-sharp samples special case
#########################################


##########################################
# Special case for glade
#  Not needed in the new glade
#os.chdir('gtk/glade')
#output = commands.getoutput("cp -Rfp * ..")
#os.chdir('..')
#shutil.rmtree('glade')
#
#os.chdir("..")
#
#
#########################################

###########################################
## Special case for gtk-wimp theme
## TODO: Get this working with new gtk
#os.chdir('gtk')
#
#if not os.path.exists('lib/gtk-2.0/2.4.0'):
#	print "Error munging gtk-wimp: Path doesn't exist: lib/gtk-2.0/2.4.0"
#	sys.exit(1)
#
## Dir already exists...
##os.makedirs('lib/gtk-2.0/2.4.0/engines')
#shutil.move('gtk-wimp-0.7.0-bin/libwimp.dll', 'lib/gtk-2.0/2.4.0/engines')
#
#os.makedirs('share/themes/gtk-wimp/gtk-2.0')
#shutil.move('gtk-wimp-0.7.0-bin/Theme/gtk-2.0/gtkrc', 'share/themes/gtk-wimp/gtk-2.0')
#
## Do some theme renaming (Looks like something similar is proposed for upstream)
## Rename default to Raleigh
## Already done
##shutil.move('share/themes/Default', 'share/themes/Raleigh')
#
## Make the wimp theme the default
## Default dir is basically empty
## Hmm... didn't work... what's the default theme on win?
#shutil.rmtree('share/themes/Default')
##shutil.move('share/themes/gtk-wimp', 'share/themes/Default')
#distutils.dir_util.copy_tree("share/themes/gtk-wimp", "share/themes/Default")
#
## Another way to make the wimp theme the default
#shutil.copy('share/themes/gtk-wimp/gtk-2.0/gtkrc', 'etc/gtk-2.0')
#
#shutil.rmtree('gtk-wimp-0.7.0-bin')
#
#os.chdir("..")
#
#
#########################################

########################################
# Set default theme
#
os.chdir('gtk')
shutil.copy('share/themes/MS-Windows/gtk-2.0/gtkrc', 'etc/gtk-2.0')
os.chdir('..')

#
########################################

##########################################
# Special case for ms' gdiplus
os.chdir('mono')

os.mkdir('share/doc/gdiplus')
shutil.move('redist.txt', 'share/doc/gdiplus')
shutil.move('license.txt', 'share/doc/gdiplus')

#shutil.move('gdiplus.dll', 'bin')
# Need to move it back so it doesn't get grabbed with the mono\* selection
shutil.move('gdiplus.dll', '..')

os.chdir("..")

#
#########################################


##########################################
# Special case for etc/mono/config

os.chdir('mono')

# Add rsvg map
utils.add_dll_map('etc/mono/config', '<dllmap dll="rsvg-2" target="librsvg-2-2.dll"/>')

# Remove other maps that aren't necessary on win32 (this should be done with the autotools so that people
#  who run from source will get the changes)
utils.remove_line_matching('etc/mono/config', '<dllmap dll="MonoPosixHelper" target="libMonoPosixHelper.so"/>')
utils.remove_line_matching('etc/mono/config', '<dllmap dll="libmySQL.dll" target="libmysqlclient.so" />')
utils.remove_line_matching('etc/mono/config', '<dllmap dll="odbc32.dll" target="libodbc.so" />')
utils.remove_line_matching('etc/mono/config', '<dllmap dll="oci" target="clntsh" />')
utils.remove_line_matching('etc/mono/config', '<dllmap dll="db2cli" target="libdb2_36.so"/>')
utils.remove_line_matching('etc/mono/config', '<dllmap dll="msvcrt" target="libc.so.6"/>')
utils.remove_line_matching('etc/mono/config', '<dllmap dll="libX11" target="libX11.so"/>')
utils.remove_line_matching('etc/mono/config', '<dllmap dll="libcairo-2.dll" target="libcairo.so.2"/>')
utils.remove_line_matching('etc/mono/config', 'sqlite')

os.chdir("..")

#
#########################################



# Add random files for shortcuts
shutil.copy('../bat/setmonopath.bat', 'mono/bin')
shutil.copy('../setup-files/mono.ico', 'mono')
shutil.copy('../setup-files/ReleaseNotes.txt', 'mono')
commands.getoutput('cp -f ../bat/startXSP*.bat xsp/bin')

# Make all the substitutions
#  bin wrapper files, .pc files
for selection in selections:
	os.chdir(selection.name)

	#########################################
	# Substitute pkgconfig files
	parameter_map = {}
	parameter_map[re.compile('^prefix=.*', re.M)] = "prefix=@@WIN_MONO_INST_DIR@@"
	qualifier = re.compile('')  # No qualifier
	
	if os.path.exists('lib/pkgconfig'):
		os.chdir('lib/pkgconfig')
		for file in os.listdir('.'):
			utils.substitute_parameters_in_file(file, qualifier, parameter_map)
		os.chdir('../..')
	#
	#########################################

	#########################################
	# Substitute cyg and win paths in sh files
	parameter_map = {}

	# Stuff built on cygwin
	parameter_map[re.compile('([cC]:\/cygwin)?\/tmp\/install')] = "@@WIN_MONO_INST_DIR@@"
	parameter_map[re.compile('\/tmp\/build_deps')] = "@@WIN_MONO_INST_DIR@@"


	# noarch rpms
	parameter_map[re.compile('(env )?\/usr')] = "@@WIN_MONO_INST_DIR@@"

	# Specifically for monodoc
	parameter_map[re.compile('^prefix=.*', re.M)] = "prefix=@@WIN_MONO_INST_DIR@@"

	# The optional space is from /usr/bin/monodoc being jacked: still works though
	qualifier = re.compile('#! ?\/bin\/sh')

	if os.path.exists('bin'):
		os.chdir('bin')
		for file in os.listdir('.'):
			utils.substitute_parameters_in_file(file, qualifier, parameter_map)
		os.chdir('..')

	#
	#########################################




	#########################################
	# .bat files

	if os.path.exists('bin'):
		os.chdir('bin')
		for file in os.listdir('.'):

			fd = open(file, 'r')
			text = fd.read()
			fd.close()

			shell_match = re.compile('#! ?\/bin\/sh')
			mono_match = re.compile(r"mono")
			empty_match = re.compile('')


			if shell_match.search(text) and mono_match.search(text):
				bat_file = file + ".bat"

				parameter_map = {}

				# If there's not already a batch file, copy the wrapper.bat
				if not os.path.exists(bat_file):
					print "Creating " + bat_file
					shutil.copy(cwd + "/bat/wrapper.bat", bat_file)

					# Get the path of the binary out of the shell script
					# Match everything after mono then after the / up to .exe
					path_string = re.compile(r"mono{0,1}?.*?\/(.*?).exe{0,1}").search(text).groups()
					# Get the last match
					path_string = path_string[len(path_string) - 1]


					# make it dos friendly
					path_string = re.sub('/', r"\\\\", path_string)
					# Put it back into the batch file
					parameter_map[re.compile('@@MONO_WRAPPER@@')] = path_string


				# There's already a batch file, just substitute 
				#(pretty retarded since GtkDemo.bat is the only .bat, oh well)
				else:
					parameter_map[re.compile(r'([cC]:\\cygwin)?\\tmp\\install')] = "@@WIN_MONO_INST_DIR@@"
					parameter_map[re.compile(r'([cC]:\\cygwin)?\\tmp\\build_deps')] = "@@WIN_MONO_INST_DIR@@"

				utils.substitute_parameters_in_file(bat_file, empty_match, parameter_map)


		os.chdir('..')


	#
	#########################################

	# Ending chdir for loop
	os.chdir('..')

# In build dir

##############################################
# gtk-sharp hacks

# Fix/remove some uneccessary wrappers (will become necessary once gtk-sharp2 is built with mono and mcs)
# gapi-codegen (copy gapi_codegen.exe to gapi-codegen.exe and delete wrapper)
shutil.copy("gtk-sharp/bin/gapi_codegen.exe", "gtk-sharp/bin/gapi-codegen.exe")
os.remove("gtk-sharp/bin/gapi-codegen")
os.remove("gtk-sharp/bin/gapi-codegen.bat")

#gapi-fixup (just delete the wrappers)
os.remove("gtk-sharp/bin/gapi-fixup")
os.remove("gtk-sharp/bin/gapi-fixup.bat")

#gconfsharp-schemagen (delete the wrappers)
os.remove("gtk-sharp/bin/gconfsharp-schemagen")
os.remove("gtk-sharp/bin/gconfsharp-schemagen.bat")


# These are native binaries but are in the lib/gtk-sharp-2.0 dir (copy and rename!, and delete wrapper)
# TODO: Should this happen in the gtk-sharp build?
# This will change once gtk-sharp2 is built with mcs/mono instead of the ms sdk
#gapi2-codegen
shutil.copy("gtk-sharp/lib/gtk-sharp-2.0/gapi_codegen.exe", "gtk-sharp/bin/gapi2-codegen.exe")
os.remove("gtk-sharp/bin/gapi2-codegen")

#gapi2-fixup
shutil.copy("gtk-sharp/lib/gtk-sharp-2.0/gapi-fixup.exe", "gtk-sharp/bin/gapi2-fixup.exe")
os.remove("gtk-sharp/bin/gapi2-fixup")

#gapi2-parser
shutil.copy("gtk-sharp/lib/gtk-sharp-2.0/gapi-parser.exe", "gtk-sharp/bin/gapi2-parser.exe")
os.remove("gtk-sharp/bin/gapi2-parser")

#gconfsharp2-schemagen
shutil.copy("gtk-sharp/lib/gtk-sharp-2.0/gconfsharp-schemagen.exe", "gtk-sharp/bin/gconfsharp2-schemagen.exe")
os.remove("gtk-sharp/bin/gconfsharp2-schemagen")

# Fix dll map config for gtkhtml
# TODO: is this not done in the gtk-sharp build?
utils.add_dll_map('mono/etc/mono/config', '<dllmap dll="gtkhtml-3.0" target="libgtkhtml-3.8-15.dll"/>')


#
##############################################

##############################################
# monodoc .bat wrapper hacks

parameter_map = {}
parameter_map[re.compile(r"\\assembler")] = r"\\lib\\monodoc\\assembler"
utils.substitute_parameters_in_file("monodoc/bin/mdassembler.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\cs2ecma")] = r"\\lib\\monodoc\\cs2ecma"
utils.substitute_parameters_in_file("monodoc/bin/mdcs2ecma.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\normalize")] = r"\\lib\\monodoc\\normalize"
utils.substitute_parameters_in_file("monodoc/bin/mdnormalizer.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\validate")] = r"\\lib\\monodoc\\validate"
utils.substitute_parameters_in_file("monodoc/bin/mdvalidater.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\mod")] = r"\\lib\\monodoc\\mod"
utils.substitute_parameters_in_file("monodoc/bin/mod.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\monodocer")] = r"\\lib\\monodoc\\monodocer"
utils.substitute_parameters_in_file("monodoc/bin/monodocer.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\monodocs2html")] = r"\\lib\\monodoc\\monodocs2html"
utils.substitute_parameters_in_file("monodoc/bin/monodocs2html.bat", re.compile(''), parameter_map)

parameter_map = {}
parameter_map[re.compile(r"\\monodocs2slashdoc")] = r"\\lib\\monodoc\\monodocs2slashdoc"
utils.substitute_parameters_in_file("monodoc/bin/monodocs2slashdoc.bat", re.compile(''), parameter_map)


# From mono-tools
parameter_map = {}
parameter_map[re.compile(r"browser.exe")] = r"browser.exe --no-gecko"
utils.substitute_parameters_in_file("monodoc/bin/monodoc", re.compile(''), parameter_map)

parameter_map = {}
#  Add path so gconf stuff can load
# (TODO note: MonoLaunch would be nice here instead of doing this)
parameter_map[re.compile('@"@@')] = 'PATH=@@DOS_MONO_INST_DIR@@\\\\bin;%PATH%\r\n@"@@'
#  This is weird... but it works
parameter_map[re.compile('browser.exe"')] = 'lib\monodoc\\\\browser.exe" --no-gecko'
utils.substitute_parameters_in_file("monodoc/bin/monodoc.bat", re.compile(''), parameter_map)

# Substitute the config file to point to the docs
parameter_map = {}
parameter_map[re.compile(r"/usr")] = r"@@WIN_MONO_INST_DIR@@"
utils.substitute_parameters_in_file("monodoc/lib/mono/gac/monodoc/1.0.0.0__0738eb9f132ed756/monodoc.dll.config", re.compile(''), parameter_map)

#
##############################################


##############################################
# gtk massages (This will need to be updated when a new version of gtk comes)
# TODO

# Substitute some etc files
parameter_map = {}
parameter_map[re.compile(r"(c:)?\/devel\/target\/gtk\+-2.6.9")] = r"@@WIN_MONO_INST_DIR@@"
utils.substitute_parameters_in_file("gtk/etc/gtk-2.0/gdk-pixbuf.loaders", re.compile(''), parameter_map)
utils.substitute_parameters_in_file("gtk/etc/gtk-2.0/gtk.immodules", re.compile(''), parameter_map)

# Now for pango
parameter_map = {}
parameter_map[re.compile(r"c:/devel/target/pango-1.8.2")] = r"@@WIN_MONO_INST_DIR@@"
utils.substitute_parameters_in_file("gtk/etc/pango/pango.modules", re.compile(''), parameter_map)

#
##############################################


# Go out of build
os.chdir('..')

# Run the guid generator on windows
print "Copying/running guidgen..."
installer_env.ssh.copy_to('guidgen/guidgen.exe', '.', mode="scp")
(code, output) = installer_env.ssh.execute('./guidgen.exe')
print "\n",
guid = output.split().pop()

if guid == "found" or not re.compile('.*-.*-.*-.*-.*').search(guid):
	print "Error getting guid: %s" % guid
	print "Output : %s" % output
	sys.exit(1)

# Massage .iss file
#  Mono.iss file (version, AppId, etc...)
shutil.copy("Mono_template.iss", "Mono.iss")
parameter_map = {}
parameter_map[re.compile("@@MONO_VERSION@@")] = sys.argv[1]
parameter_map[re.compile("@@GTK_SHARP_VERSION@@")] = sys.argv[2]
parameter_map[re.compile("@@MONO_REVISION@@")] = sys.argv[3]
parameter_map[re.compile("@@MONO_GUID@@")] = guid
parameter_map[re.compile("@@DATE@@")] = datetime.date.today().strftime('%b %d, %Y')
utils.substitute_parameters_in_file("Mono.iss", re.compile(''), parameter_map)
utils.substitute_parameters_in_file('build/mono/ReleaseNotes.txt', re.compile(''), parameter_map)

# Massage setmonopath.bat
parameter_map = {}
parameter_map[re.compile("@@MONO_VERSION@@")] = sys.argv[1]
parameter_map[re.compile("@@MONO_REVISION@@")] = sys.argv[3]
utils.substitute_parameters_in_file("build/mono/bin/setmonopath.bat", re.compile(''), parameter_map)

# Copy everything to windows_build_client 
print "Cleaning up files from build client..."
installer_env.ssh.execute("rm -Rf /tmp/windows-installer; mkdir -p /tmp/windows-installer/Output")
if code:
	print "Error cleaning up"
	print output
	sys.exit(code)

print "Copying files to build client..."
installer_env.ssh.copy_to(["build", "Mono.iss", "setup-files"], '/tmp/windows-installer', compress=1, mode='tar')

# Run installer on windows
(code, output) = installer_env.ssh.execute('export PATH="$PATH:/cygdrive/c/PROGRA~1/INNOSE~1:C:\Program Files\Inno Setup5"; cd /tmp/windows-installer; ISCC.exe Mono.iss')

if code:
	print "Error running installer"
	sys.exit(1)

# Keep record of what files went into the installer
distutils.dir_util.mkpath(output_dir)
packages_file = open('%s/packages_used.txt' % output_dir, 'w')
files_used_in_installer.sort()
packages_file.write(string.join(files_used_in_installer, "\n"))
packages_file.write("\n")
packages_file.close()

# Copy resultant file back
installer_env.ssh.copy_from("/tmp/windows-installer/Output/*", output_dir, mode='scp')

# Generate the md5sum of the final installer
output_filename = os.path.basename(glob.glob(output_dir + os.sep + "*.exe").pop())
os.system("cd %s; md5sum *.exe > %s.md5 " % (output_dir, output_filename))

