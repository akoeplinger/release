#!/usr/bin/env python

"""
TODO:
-Should I delete some of the extra junk that my dep packages install?
-Fix the csh script (vars failing that weren't previously set)

x Build/package libgdiplus
x probably should use ./jail-do just in case we end up doing this in a jail (done with packaging.py)
x Release (ChangLog)
x packages_used.txt
"""

"""
libgdiplus notes:
x freetype will be needed (probably also fontconfig)
x also, add image types to build deps: png gif tiff jpeg

"""

import commands
import os
import os.path
import sys
import shutil
import pdb
import glob
import re
import distutils.dir_util
import threading

sys.path += ['../pyutils']
import utils
import packaging
import config

# Constants
packages_to_include = {}

packages_to_include['sunos-8-sparc']  = ['mono', 'libgdiplus', 'xsp', 'ikvm', 'boo', 'monodoc', 'nant', 'ipce', 'mono-basic' ]

packages_to_include['sunos-10-sparc'] = packages_to_include['sunos-8-sparc'] + ['gtk-sharp-2.0', 'gtk-sharp', 'mono-tools', 'monodevelop', 'gtksourceview-sharp-2.0' ]

debug=1


def build_package(target):

	
	conf = packaging.buildconf(target)

	remote_temp = "/tmp/packaging"
	remote_root = remote_temp + os.sep + "root"
	remote_package_loc = remote_temp + os.sep + "install-packages"

	remote_strip_loc = conf.info['strip_path']

	output_dir = os.path.join("output", version, target, release) 

	if os.path.exists(output_dir):
		print "%s exists, bump release number" % output_dir
		sys.exit(1)

	temp_dir = "build" + os.sep + target

	# Keep list of files used to build this package
	packages_used = []

	print "Cleaning up"
	# local
	if os.path.exists(temp_dir):
		shutil.rmtree(temp_dir)
	distutils.dir_util.mkpath(temp_dir)

	# remote
	conf.buildenv.execute_command("rm -Rf %s; mkdir -p -m777 %s %s " % ( remote_temp, remote_package_loc, remote_root))

	print "Installing mono to build env..."
	# Install the rest of mono

	# Get all files needed for the zip packages to include
	files = []
	for file in packages_to_include[target]:
		package = packaging.package(conf, file)
		files += package.get_files()
		files += package.get_dep_files()

	# Remove duplicates
	files = utils.remove_list_duplicates(files)

	packages_used += map(os.path.basename, files)
	packages_used.sort()

	# Also copy script to relocate and unpack the packages
	files += [config.packaging_dir + os.sep + 'do-install-zip-pkgs']
	files += [config.packaging_dir + os.sep + '../pyutils/utils.py' ]
	files += [config.packaging_dir + os.sep + '../pyutils/rpm2cpio.py' ]
	
	# Copy them over...
	conf.buildenv.copy_to(files, remote_package_loc, compress=0)

	# This will unpack and do all the substitution, including the noarch rpms
	conf.buildenv.print_output = debug
	conf.buildenv.execute_command("%s/do-install-zip-pkgs %s /opt/mono %s/* " % (remote_package_loc, remote_root, remote_package_loc))

	prune_files = """
		bin/msg*
		bin/*gettext*
		bin/gobject-query
		bin/*jpeg*
		bin/libpng*
		bin/*tiff*
		bin/*rgb*
		bin/fax*
		bin/*gif*
		doc
		info
		man/man1/*fax*
		man/man1/*jpeg*
		man/man1/*rgb*
		man/man1/*tiff*
		man/man3
		man/man5
		share/doc
		share/emacs
		share/gettext
		share/gtk-doc
		share/man/man1/msg*
		share/man/man1/*gettext*
		share/man/man3
		""".split()

	# Delete some stuff (docs, unnecessary programs, etc...) (save msgfmt for glib building, even though we don't use it)
	conf.buildenv.execute_command("cd %s; mv bin/msgfmt .; rm -Rf %s ; mv msgfmt bin " % (remote_root, " ".join(prune_files) ) )

	# Strip files to save space
	# Is this causing problems with libgdiplus? (works over an sshd tunnel...)
	conf.buildenv.execute_command("cd %s/bin; %s *; cd ../lib; %s * " % (remote_root, remote_strip_loc, remote_strip_loc))
	conf.buildenv.print_output = debug

	print "Set up environment files..."

	# Rename environment files
	conf.buildenv.execute_command("cd %s; mv env.sh  setup.sh " % remote_root)
	conf.buildenv.execute_command("cd %s; mv env.csh setup.csh " % remote_root)

	# env.sh
	conf.buildenv.print_output = 0
	(code, output) = conf.buildenv.execute_command("cd %s; cat setup.sh" % remote_root)
	lines = output.split("\n")
	export_line = lines.pop()
	lines += ['FONTCONFIG_PATH="/opt/mono/etc/fonts"',
		export_line + " FONTCONFIG_PATH",
		""]
	output = "\n".join(lines)
	fd = open(temp_dir + '/setup.sh', 'w')
	fd.write(output)
	fd.close()
	os.chmod(temp_dir + '/setup.sh', config.shell_perms)

	# env.csh
	(code, output) = conf.buildenv.execute_command("cd %s; cat setup.csh" % remote_root)
	output += '\nsetenv FONTCONFIG_PATH "/opt/mono/etc/fonts"\n'
	fd = open(temp_dir + '/setup.csh', 'w')
	fd.write(output)
	fd.close()
	os.chmod(temp_dir + '/setup.csh', config.shell_perms)

	# Add fonts dir to local.conf
	# <dir>/usr/openwin/lib/X11/fonts</dir>
	(code, output) = conf.buildenv.execute_command("cd %s/etc/fonts; cat local.conf" % remote_root)

	output = output.replace("</fontconfig>", " <dir>/usr/openwin/lib/X11/fonts</dir>\n</fontconfig>\n")
	fd = open(temp_dir + '/local.conf', 'w')
	fd.write(output)
	fd.close()
	os.chmod(temp_dir + '/local.conf', config.data_perms)
	conf.buildenv.print_output = debug

	# Copy locally modified config files
	conf.buildenv.copy_to([temp_dir + '/setup.csh', temp_dir + '/setup.sh'], remote_root)
	conf.buildenv.copy_to([temp_dir + '/local.conf'], remote_root + '/etc/fonts')

	# Print out packages_used
	print "Saving list of packages..."
	fd = open("%s/packages_used.txt" % temp_dir, 'w')
	for file in packages_used:
		fd.write(file + "\n")
	fd.close()

	# Start process of making the package

	# Create pkginfo
	print "Generate pkginfo and prototype files..."
	pkginfo_file = temp_dir + os.sep + "pkginfo"
	prototype_file = temp_dir + os.sep + "prototype"
	shutil.copy('pkginfo.template', pkginfo_file)

	#  Get some version information
	mono_package = packaging.package(conf, 'mono')
	revision = mono_package.get_revision(release)

	# Get string of packages
	packages =  packages_to_include[target]
	packages.sort()
	packages_string = " ".join( packages )

	parameter_map = {}
	parameter_map[re.compile("@@MONO_VERSION@@")] = version
	parameter_map[re.compile("@@MONO_RELEASE@@")] = revision
	parameter_map[re.compile("@@MONO_PACKAGES@@")] = packages_string
	utils.substitute_parameters_in_file(pkginfo_file, parameter_map)

	# Create prototype
	(code, prototype) = conf.buildenv.execute_command("cd %s; find . -print | pkgproto | sort" % remote_root)

	#print prototype

	#Sample output: uid=104(builder) gid=1(other)
	(code, output) = conf.buildenv.execute_command("id")
	(uid, gid) = re.compile(r"""\((.*?)\).*\((.*?)\)""").search(output).groups()

	# Add whitespace in substitutions here because there are now filenames with the phrase 'builder' in them, 
	#  and since that's our username it throws it off
	parameter_map = {}
	parameter_map[re.compile(" %s " % uid)] = " root "
	parameter_map[re.compile(" %s" % gid)] = " root"
	parameter_map[re.compile(" 0700 ")] = " 0755 "

	prototype = utils.substitute_parameters(prototype, parameter_map)

	# Add packages_used and ChangeLog
	prototype += "\nf none packages_used.txt\nf none ChangeLog"

	prototype = "i pkginfo\n" + prototype

	if os.path.exists(prototype_file): os.remove(prototype_file)

	fd = open(prototype_file, 'w')
	fd.write(prototype)
	fd.close()

	print "Copy pkginfo, prototype, packages_used, and ChangeLog to host..."
	# Use scp mode because we don't want paths to be included in the destination
	conf.buildenv.copy_to([pkginfo_file, prototype_file, temp_dir + os.sep + 'packages_used.txt', 'ChangeLog'], remote_root)


	# Actually build the package
	print "Building package..."
	package_filename = "mono-%s_%s.%s.pkg" % (version, revision, conf.info['arch'])
	(code, output) = conf.buildenv.execute_code("cd %s; pkgmk -d . -b `pwd`  &&  pkgtrans -s `pwd` %s all; gzip %s" % (remote_root, package_filename, package_filename ))
	if code:
		print "%s: Error in creating package" % target
		sys.exit(1)

	distutils.dir_util.mkpath(output_dir)

	print "Copy package back..."
	# Have to use scp mode here, because I don't want the remote_root dir in the filename
	# Also, use no compression, since file is already compressed
	conf.buildenv.copy_from("%s/%s.gz" % (remote_root, package_filename), output_dir, compress=0)

	# Create md5
	print "Create md5..."
	utils.launch_process("cd %s; md5sum %s.gz > %s.gz.md5 " % (output_dir, package_filename, package_filename), print_output=debug)

	print "Saving packages_used.txt..."
	shutil.copy(temp_dir + os.sep + 'packages_used.txt', output_dir)




####  Main execution ####
# Collect args
if len(sys.argv) < 3:
	print "Usage: ./buildpackage <target> <version> [<release>]"
	print " target is the 'distro name', or 'all' for all solaris builds"
	print " Example: ./buildpackage sunos-8-sparc 1.1.13"
	sys.exit(1)

target = sys.argv[1]
version = sys.argv[2]

if len(sys.argv) > 3:
	release = sys.argv[3]
else:
	release = "0"


if target == 'all':
	targets = map(os.path.basename, glob.glob(config.packaging_dir + "/conf/sunos-*-*"))
else:
	targets = target.split(',')


# Starting build each target
threads = []
for target in targets:
	thread = threading.Thread(target=build_package, args=(target,))
	thread.start()
	
	threads.append(thread)


# Wait for all to finish
for thread in threads:
	if thread.isAlive(): thread.join()


